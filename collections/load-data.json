{
	"id": "ba20fd79-3332-f138-0425-28439feed757",
	"name": "Tests - Load Data",
	"description": "",
	"order": [
		"1f429571-2527-c9df-c20a-53d578e87ac0",
		"5fc3998f-2fca-ef0b-c5df-4195227624bf",
		"6d24e8aa-9312-5dbe-641a-38f6d93e5c4f",
		"9eda0586-2f48-0275-1948-8d9dce6ad481",
		"32367d9c-aed8-535e-b67e-f513b25e9bd0"
	],
	"folders": [],
	"timestamp": 1458912715800,
	"owner": "371756",
	"remoteLink": "",
	"public": false,
	"requests": [
		{
			"id": "1f429571-2527-c9df-c20a-53d578e87ac0",
			"headers": "",
			"url": "http://bigstickcarpet.com/postman-bdd/dist/postman-bdd.js",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "/**\n * - Store Postman BDD functions in helperFunctions\n * \n **/\n\nfunction expectedReturn(status, entryName) {\n    it('expect to return ' + entryName, function() {\n        expect(response).to.have.status(status);\n        expect(response).to.be.json;\n        if(entryName != undefined)\n          expect(response.body).to.not.be.empty;\n    });\n}\n\nfunction expectedHeader(entryName) {\n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        /*if(entryName != undefined)\n          it('expect to have content length', function(){\n              expect(response).to.have.header('Content-Length');\n          });*/\n    });\n}\n\nfunction expectedSchema(entryName) {\n  var schema = JSON.parse(globals[\"alfresco-schema\"]);\n  tv4.addSchema('http://alfresco.com/schema', schema);\n  var fragment = '#/definitions/' + entryName;\n  var subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n  \n  it('expect to have schema ' + fragment, function() {\n    expect(response.body).to.have.schema(subschema);\n  });\n}\n\nfunction expectedBody(entry, otherBodyChecks) {\n    describe('body', function() {\n        expectedSchema(entry);\n        if(otherBodyChecks != undefined)\n            otherBodyChecks();\n    });\n}\n\nfunction describeResponse(status, entryName, otherBodyChecks){\n    describe('\"' + request.name + '\"', function(){\n        expectedReturn(status, entryName);\n        expectedHeader(entryName);\n        if(entryName != undefined)\n            expectedBody(entryName, otherBodyChecks);\n        }\n    );\n}\n\npostman.setGlobalVariable('helperFunctions', expectedReturn.toString() + expectedHeader.toString() + expectedSchema.toString() + expectedBody.toString() + describeResponse.toString() + responseBody);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461140954432,
			"name": "helperFunctions",
			"description": "",
			"collectionId": "ba20fd79-3332-f138-0425-28439feed757",
			"responses": []
		},
		{
			"id": "32367d9c-aed8-535e-b67e-f513b25e9bd0",
			"headers": "Authorization: {{adminAuth}}\nContent-Type: application/json\n",
			"url": "{{v0Url}}/api/people",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[request.name] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461745389895,
			"name": "Create test user 2",
			"description": "",
			"collectionId": "ba20fd79-3332-f138-0425-28439feed757",
			"responses": [],
			"rawModeData": "{\n    \"userName\":\"testUser2\",\n    \"password\":\"testUser2\",\n    \"firstName\":\"Test\",\n    \"lastName\":\"User2\",\n    \"email\":\"test2@alfresco.com\",\n    \"disableAccount\":false,\n    \"quota\":-1,\n    \"groups\":[]\n}"
		},
		{
			"id": "5fc3998f-2fca-ef0b-c5df-4195227624bf",
			"headers": "",
			"url": "https://api-explorer.alfresco.com/api-explorer/definitions/alfresco-core.yaml",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"tests": "postman.setGlobalVariable(\"yaml-schema\",responseBody);",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"time": 1460384711513,
			"name": "Fetch yaml schema",
			"description": "",
			"collectionId": "ba20fd79-3332-f138-0425-28439feed757",
			"responses": []
		},
		{
			"id": "6d24e8aa-9312-5dbe-641a-38f6d93e5c4f",
			"headers": "",
			"url": "https://apitransformer.com/api/transform?output=swagger20json",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "// Small workaround that swagger not support any type\nvar schema = JSON.parse(responseBody);\n// Temporarily removed cause the online translater have problems with it\ndelete schema.definitions.Rating.properties['myRating'];\ndelete schema.definitions.Rating.properties['aggregate'];\ndelete schema.definitions.Activity.properties['activityType'];\n// Temporarily removed cause that are bugs which needs to be fixed\ndelete schema.definitions.Activity.properties['id'];\n\npostman.setGlobalVariable('alfresco-schema', JSON.stringify(schema));",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461141001695,
			"name": "Convert yaml to swagger20json",
			"description": "",
			"collectionId": "ba20fd79-3332-f138-0425-28439feed757",
			"responses": [],
			"rawModeData": "{{yaml-schema}}"
		},
		{
			"id": "9eda0586-2f48-0275-1948-8d9dce6ad481",
			"headers": "Authorization: {{adminAuth}}\nContent-Type: application/json\n",
			"url": "{{v0Url}}/api/people",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[request.name] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1461745377637,
			"name": "Create test user 1",
			"description": "",
			"collectionId": "ba20fd79-3332-f138-0425-28439feed757",
			"responses": [],
			"rawModeData": "{\n    \"userName\":\"testUser1\",\n    \"password\":\"testUser1\",\n    \"firstName\":\"Test\",\n    \"lastName\":\"User1\",\n    \"email\":\"test1@alfresco.com\",\n    \"disableAccount\":false,\n    \"quota\":-1,\n    \"groups\":[]\n}"
		}
	]
}