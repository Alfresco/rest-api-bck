{
	"id": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
	"name": "Tests - Ratings",
	"description": "Tests for the Ratings REST API",
	"order": [],
	"folders": [
		{
			"id": "c97876c0-bded-8a81-fdae-bade452e812d",
			"name": "1 POST /nodes/{nodeId}/ratings",
			"description": "",
			"order": [
				"001a6729-89a5-5f47-8060-8376e4057c50",
				"0bd14262-555c-e7cb-32b5-878b4dadd3a0",
				"de98401f-448f-a116-4e50-b2b1439912e7",
				"46f45115-a88b-8408-19ce-8ed7317b0c26",
				"b59765f3-725f-3ade-1edb-344c49259a49",
				"5bdb5f4d-1a5b-4f52-887c-a31a56b8bfef",
				"9c0f316a-627b-0072-7814-10b759ab4e13",
				"3de7f788-9d77-773b-88ac-e2b50d5ff731",
				"891b6dcd-61ce-78b9-9066-110a3606df44",
				"e4348320-5688-8283-fe18-e2378389391a",
				"78f4eba9-99e4-b8cd-a06c-a93f1f34cee8",
				"557d1428-b0b5-7151-076b-91270acc9397",
				"96143204-bf02-ac9e-9470-979d3c4cda5e",
				"5d4bd2a3-2db4-154b-b4cd-c3f1494b3622",
				"a0bb765b-e952-cdcb-2f6a-942a331766a5",
				"a2c623f8-7158-cdb5-00f4-59700e635925",
				"fabaaecb-e234-9a6e-ad7f-710e97bf8d2c"
			],
			"owner": "250102",
			"collectionId": "de6f1670-8152-0368-0a44-0228e00313e1"
		},
		{
			"id": "e25e1bed-0c1d-2a25-3d3b-7cf2ecd4dd77",
			"name": "2 GET /nodes/{nodeId}/ratings",
			"description": "",
			"order": [
				"ea8d8b63-3711-75a7-46e8-080e5d86d5cb",
				"b7dac446-aca8-562f-11b2-5e322a5ae896",
				"1f06123c-4651-61d2-8794-d481baba5262",
				"5461e7be-9eda-1d6d-9e8a-e36438954c95",
				"4e30bc86-bb16-9b51-1646-e0cf3912af95",
				"c95cbd3d-359b-9eaa-b7cb-a6e026d0bb49",
				"dcd40a57-7823-33e2-3829-65e42f6bbe02",
				"daa7c498-4577-9938-392c-c30ffa2cbc91"
			],
			"owner": "250102",
			"collectionId": "de6f1670-8152-0368-0a44-0228e00313e1"
		},
		{
			"id": "f4492a4b-f16f-2354-6884-0a7038e1f98d",
			"name": "3 GET /nodes/{nodeId}/ratings/{ratingId}",
			"description": "",
			"order": [
				"2fe83225-b714-3063-0ee8-e5006a19abbe",
				"7a0ba640-1113-b5e7-57f4-b4e3e3bc748b",
				"a9f1eee5-7326-200d-7344-2809c994209b",
				"98fa537f-c4a8-8728-394a-fefb419c1f2e"
			],
			"owner": "250102",
			"collectionId": "de6f1670-8152-0368-0a44-0228e00313e1"
		},
		{
			"id": "d83b5001-e1eb-6afc-1e6f-8b21d68de4dc",
			"name": "4 DELETE /nodes/{nodeId}/ratings/{ratingId}",
			"description": "",
			"order": [
				"657b5384-16a3-6304-a9f2-4d39f33fd450",
				"3fb927cc-f330-a992-0ba3-c0b13541dcf1",
				"6fdb0aa0-6f86-9280-11ae-55127e995325"
			],
			"owner": "250102",
			"collectionId": "de6f1670-8152-0368-0a44-0228e00313e1"
		},
		{
			"id": "b98ecdfa-1078-1c3b-47e2-b6e0e80688e3",
			"name": "5 After",
			"description": "",
			"order": [
				"c354fca4-9c34-9bd9-7837-dc826cee1eee",
				"e59ee121-0159-282e-d823-7c17d758b9f3",
				"b2ab8cd6-391b-1259-47f4-a7e48fc345fa",
				"c41eb31c-d3fc-2f8e-7d56-6c09045951f7",
				"94f92c3e-1fa0-62ec-121b-44d1bcc9274c"
			],
			"owner": "250102",
			"collectionId": "3a0c3f70-f218-a7c3-aa64-bd1fec325d83"
		}
	],
	"timestamp": 1459346258784,
	"owner": "250102",
	"remoteLink": "",
	"public": false,
	"requests": [
		{
			"id": "001a6729-89a5-5f47-8060-8376e4057c50",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/ratings",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'RatingEntry';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(201);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        /*it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });*/\n          \n        it('expect to have values', function(){\n            expect(response.body.entry.myRating,\"myRating\").to.be.true;\n            expect(response.body.entry.id,\"id\").equals(\"likes\");\n        });\n    });\n});\n\n//postman.setGlobalVariable(\"ratingId\", response.body.entry.id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459930121558,
			"name": "Positive: Add like",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": [],
			"rawModeData": "{\n  \"id\": \"likes\",\n  \"myRating\": true\n}"
		},
		{
			"id": "0bd14262-555c-e7cb-32b5-878b4dadd3a0",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/ratings",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'RatingEntry';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(201);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        /*it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });*/\n          \n        it('expect to have values', function(){\n            expect(response.body.entry.myRating,\"myRating\").to.be.true;\n            expect(response.body.entry.id,\"id\").equals(\"likes\");\n        });\n    });\n});\n\n//postman.setGlobalVariable(\"ratingId\", response.body.entry.id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459929000594,
			"name": "Positive: Add like again",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": [],
			"rawModeData": "{\n  \"id\": \"likes\",\n  \"myRating\": true\n}"
		},
		{
			"id": "1f06123c-4651-61d2-8794-d481baba5262",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/ratings?maxItems=1",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'RatingPaging';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        // compare with loaded ones\n        var globalVar = \"ratings\";\n        var tmp = JSON.parse(globals[globalVar]);\n        tmp = tmp.list.entries.slice(0,1);\n        it('expect list.entries to equal ' + globalVar + '.list.entries[0:1]', function() {\n            result = expect(JSON.stringify(response.body.list.entries),globalVar).to.deep.equal(JSON.stringify(tmp));\n        });\n    });\n});",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459421524193,
			"name": "Positive: Retrieve only one rating",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": [],
			"folder": "e25e1bed-0c1d-2a25-3d3b-7cf2ecd4dd77"
		},
		{
			"id": "2fe83225-b714-3063-0ee8-e5006a19abbe",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/ratings/likes",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'RatingEntry';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        /*it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });*/\n        \n        it('expect to have values', function(){\n            expect(response.body.entry.myRating,\"myRating\").to.be.true;\n            expect(response.body.entry.id,\"id\").equals(\"likes\");\n        });\n    });\n});",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459929824104,
			"name": "Positive: Retrieve like rating",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": []
		},
		{
			"id": "3de7f788-9d77-773b-88ac-e2b50d5ff731",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{tagId}}/ratings",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// TODO: Determine why tagId is not returned (see RA-900)\n\n/*\n// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(405);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n*/\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459929662837,
			"name": "Negative: Add like to a tag (TODO)",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": [],
			"rawModeData": "{\n  \"id\": \"likes\",\n  \"myRating\": true\n}"
		},
		{
			"id": "3fb927cc-f330-a992-0ba3-c0b13541dcf1",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/ratings/invalidRatingSchema",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(400);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459504594731,
			"name": "Negative: Remove rating with invalid rating id",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": [],
			"folder": "d83b5001-e1eb-6afc-1e6f-8b21d68de4dc",
			"rawModeData": ""
		},
		{
			"id": "46f45115-a88b-8408-19ce-8ed7317b0c26",
			"headers": "Authorization: {{user2Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/ratings",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'RatingEntry';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(201);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        /*it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });*/\n          \n        it('expect to have values', function(){\n            expect(response.body.entry.myRating,\"myRating\").to.be.equal(2);\n            expect(response.body.entry.id,\"id\").equals(\"fiveStar\");\n        });\n    });\n});\n\n//postman.setGlobalVariable(\"ratingId\", response.body.entry.id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459929026456,
			"name": "Positive: Add five star to an other user",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": [],
			"rawModeData": "{\n  \"id\": \"fiveStar\",\n  \"myRating\": 2\n}"
		},
		{
			"id": "4e30bc86-bb16-9b51-1646-e0cf3912af95",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/invalid-id/ratings",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(404);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459888032751,
			"name": "Negative: Retrieve ratings with invalid node id",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": []
		},
		{
			"id": "5461e7be-9eda-1d6d-9e8a-e36438954c95",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/ratings?maxItems=999999&skipCount=1",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'RatingPaging';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        /*it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });*/\n        \n        // compare with loaded ones\n        var globalVar = \"ratings\";\n        var tmp = JSON.parse(globals[globalVar]);\n        tmp = tmp.list.entries.slice(1);\n        it('expect list.entries to equal ' + globalVar + '.list.entries[1:]', function() {\n            result = expect(JSON.stringify(response.body.list.entries),globalVar).to.deep.equal(JSON.stringify(tmp));\n        });\n    });\n});",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459929785356,
			"name": "Positive: Retrieve ratings but skip the first",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": []
		},
		{
			"id": "557d1428-b0b5-7151-076b-91270acc9397",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/ratings",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(400);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459417760754,
			"name": "Negative: Add like with invalid rating 2",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": [],
			"rawModeData": "{\n  \"id\": \"fiveStar\",\n  \"myRating\": true\n}",
			"folder": "c97876c0-bded-8a81-fdae-bade452e812d"
		},
		{
			"id": "5bdb5f4d-1a5b-4f52-887c-a31a56b8bfef",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{commentId}}/ratings",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(405);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459417172921,
			"name": "Negative: Add like to a comment",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": [],
			"rawModeData": "{\n  \"id\": \"likes\",\n  \"myRating\": true\n}",
			"folder": "c97876c0-bded-8a81-fdae-bade452e812d"
		},
		{
			"id": "5d4bd2a3-2db4-154b-b4cd-c3f1494b3622",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/ratings",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(400);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459417947378,
			"name": "Negative: Add five star with negative myRating",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": [],
			"rawModeData": "{\n  \"id\": \"fiveStar\",\n  \"myRating\": -1\n}",
			"folder": "c97876c0-bded-8a81-fdae-bade452e812d"
		},
		{
			"id": "657b5384-16a3-6304-a9f2-4d39f33fd450",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/ratings/likes",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\ndescribe('\"' + request + '\"', function() {\n    it('should return a valid status', function() {\n        response.should.have.status(204);\n        response.should.be.json;\n    });\n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459930846635,
			"name": "Positive: Remove like rating",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"rawModeData": "",
			"responses": []
		},
		{
			"id": "6fdb0aa0-6f86-9280-11ae-55127e995325",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/invalid-id/ratings/likes",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(404);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459888113194,
			"name": "Negative: Remove like rating with invalid node id",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"rawModeData": "",
			"responses": []
		},
		{
			"id": "78f4eba9-99e4-b8cd-a06c-a93f1f34cee8",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/ratings",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(400);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459417688722,
			"name": "Negative: Add like with invalid rating",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": [],
			"rawModeData": "{\n  \"id\": \"likes\",\n  \"myRating\": 2\n}",
			"folder": "c97876c0-bded-8a81-fdae-bade452e812d"
		},
		{
			"id": "7a0ba640-1113-b5e7-57f4-b4e3e3bc748b",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/ratings/fiveStar",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'RatingEntry';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        it('expect to have values', function(){\n            expect(response.body.entry.id,\"id\").equals(\"fiveStar\");\n        });\n    });\n});",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459502585980,
			"name": "Positive: Retrieve five star rating",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": [],
			"folder": "f4492a4b-f16f-2354-6884-0a7038e1f98d"
		},
		{
			"id": "891b6dcd-61ce-78b9-9066-110a3606df44",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/invalid-id/ratings",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(404);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459887966487,
			"name": "Negative: Add like with invalid node id",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": [],
			"rawModeData": "{\n  \"id\": \"likes\",\n  \"myRating\": true\n}"
		},
		{
			"id": "94f92c3e-1fa0-62ec-121b-44d1bcc9274c",
			"headers": "Authorization: {{user2Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/ratings/fiveStar",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459429977513,
			"name": "Remove five star rating user2",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": [],
			"rawModeData": "",
			"folder": "b98ecdfa-1078-1c3b-47e2-b6e0e80688e3"
		},
		{
			"id": "96143204-bf02-ac9e-9470-979d3c4cda5e",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/ratings",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(400);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459417815111,
			"name": "Negative: Add five star rating to own content",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": [],
			"rawModeData": "{\n  \"id\": \"fiveStar\",\n  \"myRating\": 4\n}",
			"folder": "c97876c0-bded-8a81-fdae-bade452e812d"
		},
		{
			"id": "98fa537f-c4a8-8728-394a-fefb419c1f2e",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/ratings/invalidRatingSchema",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(400);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459429366754,
			"name": "Negative: Retrieve rating with invalid rating id",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": [],
			"folder": "f4492a4b-f16f-2354-6884-0a7038e1f98d"
		},
		{
			"id": "9c0f316a-627b-0072-7814-10b759ab4e13",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/tags",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.setGlobalVariable(\"tagId\", JSON.parse(responseBody).entry.id);",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"time": 1459432313658,
			"name": "Add tag",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": [],
			"rawModeData": "{\n    \"tag\":\"tag 1\"\n}\n",
			"folder": "c97876c0-bded-8a81-fdae-bade452e812d"
		},
		{
			"id": "a0bb765b-e952-cdcb-2f6a-942a331766a5",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/ratings",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(400);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459417980616,
			"name": "Negative: Add five star with to high myRating",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": [],
			"rawModeData": "{\n  \"id\": \"fiveStar\",\n  \"myRating\": 6\n}",
			"folder": "c97876c0-bded-8a81-fdae-bade452e812d"
		},
		{
			"id": "a2c623f8-7158-cdb5-00f4-59700e635925",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/ratings",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(400);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459502015418,
			"name": "Negative: Add like with empty body",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": [],
			"rawModeData": "",
			"folder": "c97876c0-bded-8a81-fdae-bade452e812d"
		},
		{
			"id": "a9f1eee5-7326-200d-7344-2809c994209b",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/invalid-id/ratings/likes",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(404);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459888064678,
			"name": "Negative: Retrieve rating with invalid node id",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": []
		},
		{
			"id": "b2ab8cd6-391b-1259-47f4-a7e48fc345fa",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/ratings/likes",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459429719027,
			"name": "Remove like rating user1",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": [],
			"rawModeData": "",
			"folder": "b98ecdfa-1078-1c3b-47e2-b6e0e80688e3"
		},
		{
			"id": "b59765f3-725f-3ade-1edb-344c49259a49",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "postman.setGlobalVariable(\"commentId\", JSON.parse(responseBody).entry.id);",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"time": 1459432323163,
			"name": "Add comment",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": [],
			"rawModeData": "{\n    \"content\": \"This is a comment\"\n}",
			"folder": "c97876c0-bded-8a81-fdae-bade452e812d"
		},
		{
			"id": "b7dac446-aca8-562f-11b2-5e322a5ae896",
			"headers": "Authorization: {{user2Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/ratings",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'RatingPaging';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        /*it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });*/\n        \n        // compare with loaded ones\n        var globalVar = \"ratings\";\n        var tmp = JSON.parse(globals[globalVar]);\n        tmp = tmp.list.entries;\n        it('expect list.entries to have length ' + tmp.length, function() {\n            result = expect(response.body.list.entries).to.have.length(tmp.length);\n        });\n    });\n});",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459929765908,
			"name": "Positive: Retrieve ratings from an other user",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": []
		},
		{
			"id": "c354fca4-9c34-9bd9-7837-dc826cee1eee",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/{{commentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"time": 1458659998435,
			"name": "Delete commentId",
			"description": "Should be already deleted!",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": [],
			"rawModeData": "",
			"folder": "b98ecdfa-1078-1c3b-47e2-b6e0e80688e3"
		},
		{
			"id": "c41eb31c-d3fc-2f8e-7d56-6c09045951f7",
			"headers": "Authorization: {{user2Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/ratings/likes",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459429757795,
			"name": "Remove like rating user2",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": [],
			"rawModeData": "",
			"folder": "b98ecdfa-1078-1c3b-47e2-b6e0e80688e3"
		},
		{
			"id": "c95cbd3d-359b-9eaa-b7cb-a6e026d0bb49",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/ratings?skipCount=-1",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(400);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459502818877,
			"name": "Negative: Retrieve ratings with negative skipCount",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": [],
			"folder": "e25e1bed-0c1d-2a25-3d3b-7cf2ecd4dd77"
		},
		{
			"id": "daa7c498-4577-9938-392c-c30ffa2cbc91",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/ratings?maxItems=-1",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(400);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459503685868,
			"name": "Negative: Retrieve ratings with negative maxItems",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": [],
			"folder": "e25e1bed-0c1d-2a25-3d3b-7cf2ecd4dd77"
		},
		{
			"id": "dcd40a57-7823-33e2-3829-65e42f6bbe02",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/ratings?skipCount={{ratingsLength}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(500);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459503348236,
			"name": "Negative: Retrieve ratings with too high skipCount",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": [],
			"folder": "e25e1bed-0c1d-2a25-3d3b-7cf2ecd4dd77"
		},
		{
			"id": "de98401f-448f-a116-4e50-b2b1439912e7",
			"headers": "Authorization: {{user2Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/ratings",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'RatingEntry';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(201);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        /*it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });*/\n          \n        it('expect to have values', function(){\n            expect(response.body.entry.myRating,\"myRating\").to.be.true;\n            expect(response.body.entry.id,\"id\").equals(\"likes\");\n        });\n    });\n});\n\n//postman.setGlobalVariable(\"ratingId\", response.body.entry.id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459929018417,
			"name": "Positive: Add like to an other user",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": [],
			"rawModeData": "{\n  \"id\": \"likes\",\n  \"myRating\": true\n}"
		},
		{
			"id": "e4348320-5688-8283-fe18-e2378389391a",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/ratings",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(400);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459417634302,
			"name": "Negative: Add like with invalid rating schema",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": [],
			"rawModeData": "{\n  \"id\": \"missingRateSchema\",\n  \"myRating\": 5\n}",
			"folder": "c97876c0-bded-8a81-fdae-bade452e812d"
		},
		{
			"id": "e59ee121-0159-282e-d823-7c17d758b9f3",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/tags/{{tagId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"time": 1458742054303,
			"name": "Delete tag",
			"description": "Should be already deleted!",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": [],
			"rawModeData": "",
			"folder": "b98ecdfa-1078-1c3b-47e2-b6e0e80688e3"
		},
		{
			"id": "ea8d8b63-3711-75a7-46e8-080e5d86d5cb",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/ratings",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'RatingPaging';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        /*it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });*/\n        \n        it('expect to have length above 0', function() {\n            expect(response.body.list.entries).to.have.length.above(0,'entries length');\n        });\n    });\n});\n\npostman.setGlobalVariable('ratings', JSON.stringify(response.body));\npostman.setGlobalVariable('ratingsLength', response.body.list.entries.length + 1);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459929713269,
			"name": "Positive: Retrieve ratings",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": []
		},
		{
			"id": "fabaaecb-e234-9a6e-ad7f-710e97bf8d2c",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/ratings",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(400);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459502235386,
			"name": "Negative: Add like without rating id property",
			"description": "",
			"collectionId": "cb576ade-d755-e1ec-d6a5-970db0a3a198",
			"responses": [],
			"rawModeData": "{\n  \"myRating\": true\n}",
			"folder": "c97876c0-bded-8a81-fdae-bade452e812d"
		}
	]
}