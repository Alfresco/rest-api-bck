{
	"id": "084f647f-eadb-e7bf-0eae-22867d9e3763",
	"name": "Tests - Tags",
	"description": "Tests for the Tags REST API",
	"order": [],
	"folders": [
		{
			"id": "211911ed-8af1-9e7c-2781-6b08384ea2f6",
			"name": "1 POST /nodes/{nodeId}/tags",
			"description": "",
			"order": [
				"dc896e99-986a-97f9-8cec-3f375a6713a6",
				"2c94be2e-5807-f154-c24f-5a568a6947f8",
				"4b7b3532-9c40-b222-0198-7052afaca2ce",
				"36b0bce1-bdb9-4f74-100a-b6283999c7db",
				"d1f298f7-7de4-9a0d-e238-ae7118ca12ca",
				"559e030f-8200-dcd7-d225-a6a77f92ea95",
				"1b381463-dc07-7a9d-d9fe-40df15cbf113",
				"e2a44e44-7792-6244-f21d-117e3ac0c350",
				"faf07abc-69d1-bf92-59d8-df843b6f2130",
				"c027457e-8501-7f8c-3abf-9b29f1c77831"
			],
			"owner": "250102",
			"collectionId": "079c0b16-c98c-e534-ebca-cbda748a0761"
		},
		{
			"id": "5931e5e3-f213-7568-2549-1babafbcf264",
			"name": "2 GET /nodes/{nodeId}/tags",
			"description": "",
			"order": [
				"627f1564-a411-2b30-dbc3-cbab81ef66ba",
				"c2c2dfef-c846-6faf-0e4b-c4f45cc63743",
				"b839ffc4-b0e6-2d31-01b9-5fed064f6a56",
				"2a501d94-393c-07eb-b8b9-f7ab604b265d",
				"20cfc4b2-3982-77f9-b2d0-d661d4dfaccc",
				"72facc8d-9237-15e8-01ea-d49389b0841b",
				"3a3c74df-41d7-3489-1afb-484e6cf08304",
				"a9749359-d4dc-c711-69dd-21ba770c786f"
			],
			"owner": "250102",
			"collectionId": "079c0b16-c98c-e534-ebca-cbda748a0761"
		},
		{
			"id": "af50770f-72ad-b517-396e-f3168740e060",
			"name": "3 GET /tags",
			"description": "",
			"order": [
				"3a726a1e-dcf8-dfc1-27b8-9e9fad3fd6b5",
				"7439bbb7-d29b-143e-e095-439792abda12",
				"01195dfb-0427-8c9d-5a9a-30dbf907f872",
				"c815f304-bac3-d4a5-b047-6302475ba657",
				"f44e518e-223a-a75c-1af2-ee07386bc176",
				"0474ac66-f90d-c103-05ce-079e7b7d3fce",
				"5703630d-3586-bed4-05d1-da4e231d4085"
			],
			"owner": "250102",
			"collectionId": "079c0b16-c98c-e534-ebca-cbda748a0761",
			"requests": [
				{
					"id": "185221da-2e5d-6346-d8d5-84d58d2d1be1",
					"headers": "Authorization: {{authorization}}\n",
					"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments",
					"preRequestScript": null,
					"pathVariables": {},
					"method": "GET",
					"data": null,
					"dataMode": "params",
					"version": 2,
					"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(postman.getGlobalVariable('postmanBDD'));\n\n// Load Alfresco schema\nvar schema = JSON.parse(postman.getGlobalVariable('alfresco-schema'));\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar fragment = '#/definitions/CommentPaging';\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"Positive: Retrieve comments from node\"', function() {\n    it('expect to return comments', function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        describe('positive values check:', function() {\n            it('test 1', function() {\n                expect(response.body.list.entries).to.have.length.above(0,'entries length');\n            });\n        });\n    });\n});\n\npostman.setGlobalVariable('retrievedComments',JSON.stringify(response.body));",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"time": 1458558561220,
					"name": "Positive: Retrieve comments from node",
					"description": "",
					"collectionId": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"responses": [],
					"owner": "371756",
					"write": true,
					"collection": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"folder": "d138554f-7b81-6ee6-acce-b306c01ef224",
					"synced": true,
					"isDeleted": true
				},
				{
					"id": "a78560d1-ede4-aa9a-ab9e-20d3fbe1c9b5",
					"headers": "Authorization: {{authorization}}\n",
					"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments?skipCount=0&maxItems=2",
					"preRequestScript": null,
					"pathVariables": {},
					"method": "GET",
					"data": null,
					"dataMode": "params",
					"version": 2,
					"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(postman.getGlobalVariable('postmanBDD'));\n\n// Load Alfresco schema\nvar schema = JSON.parse(postman.getGlobalVariable('alfresco-schema'));\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar fragment = '#/definitions/CommentPaging';\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"Positive: Retrieve comments from node\"', function() {\n    it('expect to return comments', function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        it('expect list.entries to have lengthOf 2', function() {\n            expect(response.body.list.entries,'entries length').to.have.lengthOf(2);\n        });\n    });\n});\n",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"time": 1458212139244,
					"name": "Positive: Retrieve 2 comments from node",
					"description": "",
					"collectionId": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"responses": [],
					"synced": true,
					"owner": "371756",
					"write": true,
					"collection": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"folder": "d138554f-7b81-6ee6-acce-b306c01ef224",
					"isDeleted": true
				},
				{
					"id": "6f1196cc-b236-80b0-9ca7-1d29e8b710a7",
					"headers": "Authorization: {{authorization}}\n",
					"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments?skipCount=0&maxItems=2",
					"preRequestScript": null,
					"pathVariables": {},
					"method": "GET",
					"data": null,
					"dataMode": "params",
					"version": 2,
					"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(postman.getGlobalVariable('postmanBDD'));\n\n// Load Alfresco schema\nvar schema = JSON.parse(postman.getGlobalVariable('alfresco-schema'));\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar fragment = '#/definitions/CommentPaging';\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"Positive: Retrieve only last 2 comments\"', function() {\n    it('expect to return comments', function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        it('expect list.entries to have lengthOf 2', function() {\n            expect(response.body.list.entries,'entries length').to.have.lengthOf(2);\n        });\n        \n        // compare with loaded comments before\n        var comments = JSON.parse(postman.getGlobalVariable('retrievedComments'));\n        comments = comments.list.entries.slice(0, 2);\n        it('expect list.entries[0-1] to equal comments.list.entries[0-1]', function() {\n            result = expect(response.body.list.entries.slice(0, 2),'comments 1-2').to.deep.equal(comments);\n        });\n        \n    });\n});\n",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"time": 1458558592732,
					"name": "Positive: Retrieve only last 2 comments",
					"description": "",
					"collectionId": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"responses": [],
					"owner": "371756",
					"write": true,
					"collection": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"folder": "d138554f-7b81-6ee6-acce-b306c01ef224",
					"synced": true,
					"isDeleted": true
				},
				{
					"id": "11c85885-6c0a-40a6-490d-035f80eba7e7",
					"headers": "Authorization: {{authorization}}\n",
					"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments?skipCount=2",
					"preRequestScript": null,
					"pathVariables": {},
					"method": "GET",
					"data": null,
					"dataMode": "params",
					"version": 2,
					"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(postman.getGlobalVariable('postmanBDD'));\n\n// Load Alfresco schema\nvar schema = JSON.parse(postman.getGlobalVariable('alfresco-schema'));\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar fragment = '#/definitions/CommentPaging';\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"Positive: Retrieve comments but skip the first 2\"', function() {\n    it('expect to return comments', function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        // compare with loaded comments before\n        var comments = JSON.parse(postman.getGlobalVariable('retrievedComments'));\n        comments = comments.list.entries.slice(2);\n        it('expect list.entries to equal comments.list.entries[3:]', function() {\n            result = expect(response.body.list.entries,'comments').to.deep.equal(comments);\n        });\n        \n    });\n});\n",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"time": 1458560058059,
					"name": "Positive: Retrieve comments but skip the first 2",
					"description": "",
					"collectionId": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"responses": [],
					"owner": "371756",
					"write": true,
					"collection": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"folder": "d138554f-7b81-6ee6-acce-b306c01ef224",
					"synced": true,
					"isDeleted": true
				},
				{
					"id": "72b90faf-b6c2-97ac-662f-ebec0384dba0",
					"headers": "Authorization: {{authorization}}\n",
					"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}};3.0/comments",
					"preRequestScript": null,
					"pathVariables": {},
					"method": "GET",
					"data": null,
					"dataMode": "params",
					"version": 2,
					"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(postman.getGlobalVariable('postmanBDD'));\n\n// Load Alfresco schema\nvar schema = JSON.parse(postman.getGlobalVariable('alfresco-schema'));\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar fragment = '#/definitions/CommentPaging';\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"Positive: Retrieve comments with version number\"', function() {\n    it('expect to return comments', function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        describe('positive values check:', function() {\n            it('test 1', function() {\n                expect(response.body.list.entries).to.have.length.above(0,'entries length');\n            });\n        });\n    });\n});\n",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"time": 1458560063399,
					"name": "Positive: Retrieve comments with version number",
					"description": "",
					"collectionId": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"responses": [],
					"owner": "371756",
					"write": true,
					"collection": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"folder": "d138554f-7b81-6ee6-acce-b306c01ef224",
					"synced": true,
					"isDeleted": true
				},
				{
					"id": "1fb7e70e-24bd-b6c7-fd9d-19be496a8ea1",
					"headers": "Authorization: {{authorization}}\n",
					"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/invalid/comments",
					"preRequestScript": null,
					"pathVariables": {},
					"method": "GET",
					"data": null,
					"dataMode": "params",
					"version": 2,
					"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(postman.getGlobalVariable('postmanBDD'));\n\n// Load Alfresco schema\nvar schema = JSON.parse(postman.getGlobalVariable('alfresco-schema'));\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar fragment = '#/definitions/Error';\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"Negative: Retrieve comments from invalid node\"', function() {\n    it('expect to return an error', function() {\n        expect(response).to.have.status(404);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"time": 1458212335202,
					"name": "Negative: Retrieve comments from invalid node",
					"description": "",
					"collectionId": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"responses": [],
					"synced": true,
					"owner": "371756",
					"write": true,
					"collection": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"folder": "d138554f-7b81-6ee6-acce-b306c01ef224"
				},
				{
					"id": "63601a7d-ab0d-14df-20e1-ac6ca77394d9",
					"headers": "Authorization: {{authorization}}\n",
					"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}};pwc/comments",
					"preRequestScript": null,
					"pathVariables": {},
					"method": "GET",
					"data": null,
					"dataMode": "params",
					"version": 2,
					"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(postman.getGlobalVariable('postmanBDD'));\n\n// Load Alfresco schema\nvar schema = JSON.parse(postman.getGlobalVariable('alfresco-schema'));\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar fragment = '#/definitions/Error';\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"Negative: Retrieve comments from invalid node\"', function() {\n    it('expect to return an error', function() {\n        expect(response).to.have.status(404);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"time": 1458212347172,
					"name": "Negative: Retrieve comments from invalid node 2",
					"description": "",
					"collectionId": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"responses": [],
					"synced": true,
					"owner": "371756",
					"write": true,
					"collection": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"folder": "d138554f-7b81-6ee6-acce-b306c01ef224",
					"isDeleted": true
				},
				{
					"id": "794fe2e5-3dc5-a712-c6ba-6de239c8a22b",
					"headers": "Authorization: {{authorization}}\n",
					"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{notJoinedSiteNodeId}}/comments",
					"preRequestScript": null,
					"pathVariables": {},
					"method": "GET",
					"data": null,
					"dataMode": "params",
					"version": 2,
					"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(postman.getGlobalVariable('postmanBDD'));\n\n// Load Alfresco schema\nvar schema = JSON.parse(postman.getGlobalVariable('alfresco-schema'));\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar fragment = '#/definitions/Error';\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"Negative: Retrieve comments from a not joined site\"', function() {\n    it('expect to return an error', function() {\n        expect(response).to.have.status(403);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"time": 1458215615025,
					"name": "Negative: Retrieve comments from a not joined site",
					"description": "",
					"collectionId": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"responses": [],
					"synced": true,
					"owner": "371756",
					"write": true,
					"collection": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"folder": "d138554f-7b81-6ee6-acce-b306c01ef224",
					"isDeleted": true
				}
			]
		},
		{
			"id": "ce75f200-34cc-ba3c-7c4e-f0c014b2d2b8",
			"name": "4 PUT /tags/{tagId}",
			"description": "",
			"order": [
				"23ab31bd-1706-9643-e91f-cea8fc521016",
				"4d9261cd-296d-b5be-1709-8ddeafba84f3",
				"ef6f76c3-9ba9-394a-049f-86155c4b4f1d",
				"cdcd87e5-3b04-991b-3bd6-641342a07c48",
				"39f64ab7-3494-2426-facb-4f2b0b7919c6"
			],
			"owner": "250102",
			"collectionId": "079c0b16-c98c-e534-ebca-cbda748a0761",
			"timestamp": null
		},
		{
			"id": "e0c192e6-40a9-2708-073a-01a9ee9be90e",
			"name": "5 GET /tags/{tagId}",
			"description": "",
			"order": [
				"ad1ed76d-8e76-b5f8-27c1-0cfe14141c2b",
				"cea66829-3078-c038-f565-444704052aef"
			],
			"owner": "250102",
			"collectionId": "079c0b16-c98c-e534-ebca-cbda748a0761",
			"requests": [
				{
					"id": "c8af3591-e184-0d74-bde3-ad3d52730f13",
					"headers": "Authorization: {{authorization}}\n",
					"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments",
					"preRequestScript": null,
					"pathVariables": {},
					"method": "GET",
					"data": null,
					"dataMode": "params",
					"version": 2,
					"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(postman.getGlobalVariable('postmanBDD'));\n\n// Load Alfresco schema\nvar schema = JSON.parse(postman.getGlobalVariable('alfresco-schema'));\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar fragment = '#/definitions/CommentPaging';\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"Positive: Retrieve comments from node\"', function() {\n    it('expect to return comments', function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        describe('positive values check:', function() {\n            it('test 1', function() {\n                expect(response.body.list.entries).to.have.length.above(0,'entries length');\n            });\n        });\n    });\n});\n\npostman.setGlobalVariable('retrievedComments',JSON.stringify(response.body));",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"time": 1458558561220,
					"name": "Positive: Retrieve comments from node",
					"description": "",
					"collectionId": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"responses": [],
					"owner": "371756",
					"write": true,
					"collection": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"folder": "9f033b24-6d37-07e7-ad4e-cdb0b14d75ac",
					"synced": true
				},
				{
					"id": "c2d91363-9c25-3b3b-c04f-4c3da51e3bdd",
					"headers": "Authorization: {{authorization}}\n",
					"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments?skipCount=0&maxItems=2",
					"preRequestScript": null,
					"pathVariables": {},
					"method": "GET",
					"data": null,
					"dataMode": "params",
					"version": 2,
					"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(postman.getGlobalVariable('postmanBDD'));\n\n// Load Alfresco schema\nvar schema = JSON.parse(postman.getGlobalVariable('alfresco-schema'));\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar fragment = '#/definitions/CommentPaging';\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"Positive: Retrieve comments from node\"', function() {\n    it('expect to return comments', function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        it('expect list.entries to have lengthOf 2', function() {\n            expect(response.body.list.entries,'entries length').to.have.lengthOf(2);\n        });\n    });\n});\n",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"time": 1458212139244,
					"name": "Positive: Retrieve 2 comments from node",
					"description": "",
					"collectionId": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"responses": [],
					"synced": true,
					"owner": "371756",
					"write": true,
					"collection": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"folder": "9f033b24-6d37-07e7-ad4e-cdb0b14d75ac",
					"isDeleted": true
				},
				{
					"id": "54636502-0a13-a1f4-519d-2c04182c7704",
					"headers": "Authorization: {{authorization}}\n",
					"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments?skipCount=0&maxItems=2",
					"preRequestScript": null,
					"pathVariables": {},
					"method": "GET",
					"data": null,
					"dataMode": "params",
					"version": 2,
					"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(postman.getGlobalVariable('postmanBDD'));\n\n// Load Alfresco schema\nvar schema = JSON.parse(postman.getGlobalVariable('alfresco-schema'));\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar fragment = '#/definitions/CommentPaging';\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"Positive: Retrieve only last 2 comments\"', function() {\n    it('expect to return comments', function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        it('expect list.entries to have lengthOf 2', function() {\n            expect(response.body.list.entries,'entries length').to.have.lengthOf(2);\n        });\n        \n        // compare with loaded comments before\n        var comments = JSON.parse(postman.getGlobalVariable('retrievedComments'));\n        comments = comments.list.entries.slice(0, 2);\n        it('expect list.entries[0-1] to equal comments.list.entries[0-1]', function() {\n            result = expect(response.body.list.entries.slice(0, 2),'comments 1-2').to.deep.equal(comments);\n        });\n        \n    });\n});\n",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"time": 1458558592732,
					"name": "Positive: Retrieve only last 2 comments",
					"description": "",
					"collectionId": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"responses": [],
					"owner": "371756",
					"write": true,
					"collection": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"folder": "9f033b24-6d37-07e7-ad4e-cdb0b14d75ac",
					"synced": true,
					"isDeleted": true
				},
				{
					"id": "425e5922-aade-37e9-eb20-d721b6dd3c25",
					"headers": "Authorization: {{authorization}}\n",
					"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments?skipCount=2",
					"preRequestScript": null,
					"pathVariables": {},
					"method": "GET",
					"data": null,
					"dataMode": "params",
					"version": 2,
					"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(postman.getGlobalVariable('postmanBDD'));\n\n// Load Alfresco schema\nvar schema = JSON.parse(postman.getGlobalVariable('alfresco-schema'));\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar fragment = '#/definitions/CommentPaging';\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"Positive: Retrieve comments but skip the first 2\"', function() {\n    it('expect to return comments', function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        // compare with loaded comments before\n        var comments = JSON.parse(postman.getGlobalVariable('retrievedComments'));\n        comments = comments.list.entries.slice(2);\n        it('expect list.entries to equal comments.list.entries[3:]', function() {\n            result = expect(response.body.list.entries,'comments').to.deep.equal(comments);\n        });\n        \n    });\n});\n",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"time": 1458560058059,
					"name": "Positive: Retrieve comments but skip the first 2",
					"description": "",
					"collectionId": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"responses": [],
					"owner": "371756",
					"write": true,
					"collection": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"folder": "9f033b24-6d37-07e7-ad4e-cdb0b14d75ac",
					"synced": true,
					"isDeleted": true
				},
				{
					"id": "2835d552-204b-9cea-716e-fc6ff0e6ac46",
					"headers": "Authorization: {{authorization}}\n",
					"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}};3.0/comments",
					"preRequestScript": null,
					"pathVariables": {},
					"method": "GET",
					"data": null,
					"dataMode": "params",
					"version": 2,
					"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(postman.getGlobalVariable('postmanBDD'));\n\n// Load Alfresco schema\nvar schema = JSON.parse(postman.getGlobalVariable('alfresco-schema'));\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar fragment = '#/definitions/CommentPaging';\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"Positive: Retrieve comments with version number\"', function() {\n    it('expect to return comments', function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        describe('positive values check:', function() {\n            it('test 1', function() {\n                expect(response.body.list.entries).to.have.length.above(0,'entries length');\n            });\n        });\n    });\n});\n",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"time": 1458560063399,
					"name": "Positive: Retrieve comments with version number",
					"description": "",
					"collectionId": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"responses": [],
					"owner": "371756",
					"write": true,
					"collection": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"folder": "9f033b24-6d37-07e7-ad4e-cdb0b14d75ac",
					"synced": true,
					"isDeleted": true
				},
				{
					"id": "6c5a5a11-771d-353d-aefb-e07f60b54989",
					"headers": "Authorization: {{authorization}}\n",
					"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/invalid/comments",
					"preRequestScript": null,
					"pathVariables": {},
					"method": "GET",
					"data": null,
					"dataMode": "params",
					"version": 2,
					"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(postman.getGlobalVariable('postmanBDD'));\n\n// Load Alfresco schema\nvar schema = JSON.parse(postman.getGlobalVariable('alfresco-schema'));\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar fragment = '#/definitions/Error';\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"Negative: Retrieve comments from invalid node\"', function() {\n    it('expect to return an error', function() {\n        expect(response).to.have.status(404);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"time": 1458212335202,
					"name": "Negative: Retrieve comments from invalid node",
					"description": "",
					"collectionId": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"responses": [],
					"synced": true,
					"owner": "371756",
					"write": true,
					"collection": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"folder": "9f033b24-6d37-07e7-ad4e-cdb0b14d75ac"
				},
				{
					"id": "2979fc39-01e6-fa38-d495-5adc6d0408b7",
					"headers": "Authorization: {{authorization}}\n",
					"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}};pwc/comments",
					"preRequestScript": null,
					"pathVariables": {},
					"method": "GET",
					"data": null,
					"dataMode": "params",
					"version": 2,
					"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(postman.getGlobalVariable('postmanBDD'));\n\n// Load Alfresco schema\nvar schema = JSON.parse(postman.getGlobalVariable('alfresco-schema'));\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar fragment = '#/definitions/Error';\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"Negative: Retrieve comments from invalid node\"', function() {\n    it('expect to return an error', function() {\n        expect(response).to.have.status(404);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"time": 1458212347172,
					"name": "Negative: Retrieve comments from invalid node 2",
					"description": "",
					"collectionId": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"responses": [],
					"synced": true,
					"owner": "371756",
					"write": true,
					"collection": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"folder": "9f033b24-6d37-07e7-ad4e-cdb0b14d75ac",
					"isDeleted": true
				},
				{
					"id": "e6a0db25-8758-741a-2468-34a1ad3225f6",
					"headers": "Authorization: {{authorization}}\n",
					"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{notJoinedSiteNodeId}}/comments",
					"preRequestScript": null,
					"pathVariables": {},
					"method": "GET",
					"data": null,
					"dataMode": "params",
					"version": 2,
					"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(postman.getGlobalVariable('postmanBDD'));\n\n// Load Alfresco schema\nvar schema = JSON.parse(postman.getGlobalVariable('alfresco-schema'));\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar fragment = '#/definitions/Error';\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"Negative: Retrieve comments from a not joined site\"', function() {\n    it('expect to return an error', function() {\n        expect(response).to.have.status(403);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"time": 1458215615025,
					"name": "Negative: Retrieve comments from a not joined site",
					"description": "",
					"collectionId": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"responses": [],
					"synced": true,
					"owner": "371756",
					"write": true,
					"collection": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"folder": "9f033b24-6d37-07e7-ad4e-cdb0b14d75ac",
					"isDeleted": true
				}
			],
			"timestamp": null
		},
		{
			"id": "39a8f64e-3960-2b03-5d13-3bff9b2d0bd7",
			"name": "6 DELETE /nodes/{nodeId}/tags/{tagId}",
			"description": "",
			"order": [
				"32dfda3f-0f10-14eb-431f-5713aea12722",
				"3c4233de-0df8-ded5-015d-4144a398ed44",
				"4238f39a-da63-2b8e-c719-6eb9604413ae",
				"317efc7e-ffc1-f064-e954-7c3a7d1dd2a3",
				"b2d68136-7a67-e5ce-3430-cbd9fb9929d2"
			],
			"owner": "250102",
			"collectionId": "079c0b16-c98c-e534-ebca-cbda748a0761"
		},
		{
			"id": "0b13f76c-db73-017b-813a-6354c9a5de39",
			"name": "7 After",
			"description": "",
			"order": [
				"d1ed42c8-9bb1-5e6d-8bab-df74e2440eb1",
				"2340aaea-763e-f1a9-2d25-c6621687ce96",
				"81b0fdab-e527-668b-50c5-aedc60c0429b",
				"5df83944-4d12-197d-36ea-9b8f008df562",
				"e07db543-728c-b206-4217-e0dcd8b62010",
				"e20023bf-d43f-76e7-7ba6-a60a3650640e"
			],
			"owner": "250102",
			"requests": [
				{
					"id": "c162f937-54d5-f616-d8ca-a67f80360902",
					"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
					"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/{{commentId}}",
					"preRequestScript": null,
					"pathVariables": {},
					"method": "DELETE",
					"data": "",
					"dataMode": "raw",
					"version": 2,
					"tests": "\n",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"time": 1458659998435,
					"name": "Delete commentId",
					"description": "Should be already deleted!",
					"collectionId": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"responses": [],
					"synced": true,
					"folder": "db8a2eae-df2a-6ce3-18ef-2ea7bc9e4cb9",
					"rawModeData": ""
				},
				{
					"id": "8e226116-e28e-47b9-a5d2-bff733c0f150",
					"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
					"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/{{commentId2}}",
					"preRequestScript": null,
					"pathVariables": {},
					"method": "DELETE",
					"data": "",
					"dataMode": "raw",
					"version": 2,
					"tests": "\n",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"time": 1458660082435,
					"name": "Delete commentId2",
					"description": "",
					"collectionId": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"responses": [],
					"synced": true,
					"folder": "db8a2eae-df2a-6ce3-18ef-2ea7bc9e4cb9",
					"rawModeData": "",
					"isDeleted": true
				},
				{
					"id": "9e9c116b-e99d-5440-f3c5-b3d339badb65",
					"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
					"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/{{commentId3}}",
					"preRequestScript": null,
					"pathVariables": {},
					"method": "DELETE",
					"data": "",
					"dataMode": "raw",
					"version": 2,
					"tests": "\n",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"time": 1458660101131,
					"name": "Delete commentId3",
					"description": "",
					"collectionId": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"responses": [],
					"synced": true,
					"folder": "db8a2eae-df2a-6ce3-18ef-2ea7bc9e4cb9",
					"rawModeData": "",
					"isDeleted": true
				},
				{
					"id": "f3472edd-d3e4-70dc-e0d3-6bb64a0ec3a6",
					"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
					"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/{{commentId4}}",
					"preRequestScript": null,
					"pathVariables": {},
					"method": "DELETE",
					"data": "",
					"dataMode": "raw",
					"version": 2,
					"tests": "\n",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"time": 1458660188592,
					"name": "Delete commentId4",
					"description": "",
					"collectionId": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"responses": [],
					"synced": true,
					"folder": "db8a2eae-df2a-6ce3-18ef-2ea7bc9e4cb9",
					"rawModeData": "",
					"isDeleted": true
				},
				{
					"id": "89b352bd-6118-5f13-26e0-0e68ab627412",
					"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
					"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/{{commentId5}}",
					"preRequestScript": null,
					"pathVariables": {},
					"method": "DELETE",
					"data": "",
					"dataMode": "raw",
					"version": 2,
					"tests": "\n",
					"currentHelper": "normal",
					"helperAttributes": "{}",
					"time": 1458660203408,
					"name": "Delete commentId5",
					"description": "",
					"collectionId": "079c0b16-c98c-e534-ebca-cbda748a0761",
					"responses": [],
					"synced": true,
					"folder": "db8a2eae-df2a-6ce3-18ef-2ea7bc9e4cb9",
					"rawModeData": "",
					"isDeleted": true
				}
			],
			"collectionId": "079c0b16-c98c-e534-ebca-cbda748a0761"
		}
	],
	"timestamp": 1458574690283,
	"owner": "250102",
	"remoteLink": "",
	"public": false,
	"requests": [
		{
			"id": "01195dfb-0427-8c9d-5a9a-30dbf907f872",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/tags?skipCount=2",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'TagEntry';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        // compare with loaded ones\n        var globalVar = \"networkTags\";\n        var tmp = JSON.parse(globals[globalVar]);\n        tmp = tmp.list.entries.slice(2);\n        it('expect list.entries to equal ' + globalVar + '.list.entries[2:]', function() {\n            result = expect(JSON.stringify(response.body.list.entries),globalVar).to.deep.equal(JSON.stringify(tmp));\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459421082999,
			"name": "Positive: Retrieve network tags but skip the first 2",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "af50770f-72ad-b517-396e-f3168740e060"
		},
		{
			"id": "0474ac66-f90d-c103-05ce-079e7b7d3fce",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/tags?skipCount={{networkTagsLength}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// TODO: Investigate why a 500 is expected, that should be a bug!!\n\n/*\n// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(500);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n*/",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459885771642,
			"name": "Negative: Retrieve network tags with too high skipCount (TODO)",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": []
		},
		{
			"id": "1b381463-dc07-7a9d-d9fe-40df15cbf113",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{tagId}}/tags",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(405);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"time": 1459258729107,
			"name": "Negative: Add tag to a tag",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "211911ed-8af1-9e7c-2781-6b08384ea2f6",
			"timestamp": null,
			"rawModeData": "{\n    \"tag\":\"tag 1 again\"\n}"
		},
		{
			"id": "20cfc4b2-3982-77f9-b2d0-d661d4dfaccc",
			"headers": "Authorization: {{user2Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/tags",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(403);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"time": 1459258767802,
			"name": "Negative: Retrieve tags from another account",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "5931e5e3-f213-7568-2549-1babafbcf264",
			"timestamp": null
		},
		{
			"id": "2340aaea-763e-f1a9-2d25-c6621687ce96",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/tags/{{tagId2}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1458742341913,
			"name": "Delete tagId2",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "0b13f76c-db73-017b-813a-6354c9a5de39",
			"rawModeData": ""
		},
		{
			"id": "23ab31bd-1706-9643-e91f-cea8fc521016",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/tags/{{tagId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'TagEntry';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        it('expect to have values', function(){\n            expect(response.body.entry.tag,\"tag\").equals(\"Updated tag 1\");\n            expect(response.body.entry.id,\"id\").equals(globals[\"tagId\"]);\n        });\n    });\n});",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"time": 1459433715292,
			"name": "Positive: Update tag from a node",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "ce75f200-34cc-ba3c-7c4e-f0c014b2d2b8",
			"timestamp": null,
			"rawModeData": "{\n  \"tag\": \"Updated tag 1\"\n}"
		},
		{
			"id": "2a501d94-393c-07eb-b8b9-f7ab604b265d",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/invalid-id/tags",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(404);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459884872103,
			"name": "Negative: Retrieve tags from invalid node",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": []
		},
		{
			"id": "2c94be2e-5807-f154-c24f-5a568a6947f8",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/tags",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'TagEntry';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(201);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        var testTagId = postman.getGlobalVariable(\"tagId\", response.body.entry.id);\n        it('expect to have values', function(){\n            expect(response.body.entry.tag,\"tag\").equals(\"tag 1\");\n            expect(response.body.entry.id,\"id\").equals(testTagId);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"time": 1459258715835,
			"name": "Positive: Add tag again",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "211911ed-8af1-9e7c-2781-6b08384ea2f6",
			"timestamp": null,
			"rawModeData": "{\n    \"tag\":\"tag 1\"\n}"
		},
		{
			"id": "317efc7e-ffc1-f064-e954-7c3a7d1dd2a3",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/tags/invalid-id",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(404);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459885320721,
			"name": "Negative: Delete tag with invalid tag id",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "32dfda3f-0f10-14eb-431f-5713aea12722",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/tags/{{tagId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('should return a valid status', function() {\n        response.should.have.status(204);\n        response.should.be.json;\n    });\n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"time": 1459258683389,
			"name": "Positive: Delete tag",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "39a8f64e-3960-2b03-5d13-3bff9b2d0bd7",
			"timestamp": null,
			"rawModeData": ""
		},
		{
			"id": "36b0bce1-bdb9-4f74-100a-b6283999c7db",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/tags",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'TagEntry';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(201);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        it('first tag expect to have values', function(){\n            var i = 0;\n            postman.setGlobalVariable('tagId5',response.body.list.entries[i].entry.id);\n            expect(response.body.list.entries[i].entry.tag,\"entry.tag\").equals(\"public tag 1\");\n        });\n        \n        it('second tag expect to have values', function(){\n            var i = 1;\n            postman.setGlobalVariable('tagId6',response.body.list.entries[i].entry.id);\n            expect(response.body.list.entries[i].entry.tag,\"entry.tag\").equals(\"public tag 2\");\n        });\n    });\n});\n\npostman.setGlobalVariable(\"joinedSideTagId\", response.body.list.entries[0].entry.id);",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"time": 1459258722619,
			"name": "Positive: Add tags to a joined site node",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "211911ed-8af1-9e7c-2781-6b08384ea2f6",
			"timestamp": null,
			"rawModeData": "[\n  {\n    \"tag\":\"public tag 1\"\n  },\n  {\n    \"tag\":\"public tag 2\"\n  },\n  {\n    \"tag\":\"public tag 3\"\n  },\n  {\n    \"tag\":\"public tag 4\"\n  }\n]"
		},
		{
			"id": "39f64ab7-3494-2426-facb-4f2b0b7919c6",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/tags/{{tagId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(400);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459886857514,
			"name": "Negative: Update tag with empty body",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"rawModeData": "{\n}"
		},
		{
			"id": "3a3c74df-41d7-3489-1afb-484e6cf08304",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/tags?skipCount={{tagsLength}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// TODO: Investigate why a 500 is expected, that should be a bug!!\n\n/*\n// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(500);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n*/\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459885677996,
			"name": "Negative: Retrieve tags with too high skipCount (TODO)",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": []
		},
		{
			"id": "3a726a1e-dcf8-dfc1-27b8-9e9fad3fd6b5",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/tags",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'TagEntry';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        it('expect to have length above 0', function() {\n            expect(response.body.list.entries).to.have.length.above(0,'entries length');\n        });\n    });\n});\n\npostman.setGlobalVariable('networkTags',JSON.stringify(response.body));\npostman.setGlobalVariable('networkTagsLength', response.body.list.entries.length + 1);",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"time": 1459516230160,
			"name": "Positive: Retrieve network tags",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "af50770f-72ad-b517-396e-f3168740e060",
			"timestamp": null
		},
		{
			"id": "3c4233de-0df8-ded5-015d-4144a398ed44",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/tags/{{tagId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(403);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459258825424,
			"name": "Negative: Delete deleted tag",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "39a8f64e-3960-2b03-5d13-3bff9b2d0bd7",
			"rawModeData": ""
		},
		{
			"id": "4238f39a-da63-2b8e-c719-6eb9604413ae",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/invalid-id/tags/{{tagId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(404);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459885312269,
			"name": "Negative: Delete tag with invalid node id",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "4b7b3532-9c40-b222-0198-7052afaca2ce",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/tags",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'TagEntry';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(201);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n          \n        it('first tag expect to have values', function(){\n            var i = 0;\n            postman.setGlobalVariable('tagId2',response.body.list.entries[i].entry.id);\n            expect(response.body.list.entries[i].entry.tag,\"tag\").equals(\"\\u67e5\\u770b\\u5168\\u90e8\");\n        });\n        \n        it('second tag expect to have values', function(){\n            var i = 1;\n            postman.setGlobalVariable('tagId3',response.body.list.entries[i].entry.id);\n            expect(response.body.list.entries[i].entry.tag,\"tag\").equals(\"\\u67e5\\u770b\\u5168\\u91e8\");\n        });\n        \n        it('third tag expect to have values', function(){\n            var i = 2;\n            postman.setGlobalVariable('tagId4',response.body.list.entries[i].entry.id);\n            expect(response.body.list.entries[i].entry.tag,\"tag\").equals(\"%^&%&$^√Ç¬£@\");\n        });\n    });\n});",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"time": 1459258719347,
			"name": "Positive: Add multi-byte characters tags",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "211911ed-8af1-9e7c-2781-6b08384ea2f6",
			"timestamp": null,
			"rawModeData": "[\n  {\n    \"tag\":\"\\u67e5\\u770b\\u5168\\u90e8\"\n  },\n  {\n    \"tag\":\"\\u67e5\\u770b\\u5168\\u91e8\"\n  },\n  {\n    \"tag\":\"%^&%&$^√Ç¬£@\"\n  }\n]"
		},
		{
			"id": "4d9261cd-296d-b5be-1709-8ddeafba84f3",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/tags/{{joinedSideTagId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'TagEntry';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        it('expect to have values', function(){\n            expect(response.body.entry.tag,\"tag\").equals(\"Updated side tag 1\");\n            expect(response.body.entry.id,\"id\").equals(globals[\"tagId\"]);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459258796952,
			"name": "Positive: Update tag from a joined site node",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "ce75f200-34cc-ba3c-7c4e-f0c014b2d2b8",
			"rawModeData": "{\n  \"tag\": \"Updated side tag 1\"\n}"
		},
		{
			"id": "559e030f-8200-dcd7-d225-a6a77f92ea95",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{commentId}}/tags",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(405);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"time": 1459258725827,
			"name": "Negative: Add tag to a comment",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "211911ed-8af1-9e7c-2781-6b08384ea2f6",
			"timestamp": null,
			"rawModeData": "{\n    \"tag\":\"tag 1\"\n}"
		},
		{
			"id": "5703630d-3586-bed4-05d1-da4e231d4085",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/tags?maxItems=-1",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(400);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459516275179,
			"name": "Negative: Retrieve network tags with negative maxItems",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "af50770f-72ad-b517-396e-f3168740e060"
		},
		{
			"id": "5df83944-4d12-197d-36ea-9b8f008df562",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/tags/{{tagId4}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1458742393636,
			"name": "Delete tagId4",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "0b13f76c-db73-017b-813a-6354c9a5de39",
			"rawModeData": ""
		},
		{
			"id": "627f1564-a411-2b30-dbc3-cbab81ef66ba",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/tags",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'TagEntry';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        it('expect to have length above 0', function() {\n            expect(response.body.list.entries).to.have.length.above(0,'entries length');\n        });\n    });\n});\n\npostman.setGlobalVariable('tags',JSON.stringify(response.body));\npostman.setGlobalVariable('tagsLength', response.body.list.entries.length + 1);",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"time": 1459515684915,
			"name": "Positive: Retrieve tags",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "5931e5e3-f213-7568-2549-1babafbcf264",
			"timestamp": null
		},
		{
			"id": "72facc8d-9237-15e8-01ea-d49389b0841b",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/tags?skipCount=-1",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(400);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459515545197,
			"name": "Negative: Retrieve tags with negative skipCount",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "5931e5e3-f213-7568-2549-1babafbcf264"
		},
		{
			"id": "7439bbb7-d29b-143e-e095-439792abda12",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/tags?skipCount=0&maxItems=2",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'TagEntry';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        it('expect list.entries to have length of 2', function() {\n            expect(response.body.list.entries,'entries length').to.have.lengthOf(2);\n        });\n        \n        // compare with loaded ones\n        var globalVar = \"networkTags\";\n        var tmp = JSON.parse(globals[globalVar]);\n        tmp = tmp.list.entries.slice(0,2);\n        it('expect list.entries to equal ' + globalVar + '.list.entries[0:1]', function() {\n            result = expect(JSON.stringify(response.body.list.entries),globalVar).to.deep.equal(JSON.stringify(tmp));\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"time": 1459421033512,
			"name": "Positive: Retrieve only last 2 network tags",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "af50770f-72ad-b517-396e-f3168740e060",
			"timestamp": null
		},
		{
			"id": "81b0fdab-e527-668b-50c5-aedc60c0429b",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/tags/{{tagId3}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1458742379639,
			"name": "Delete tagId3",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "0b13f76c-db73-017b-813a-6354c9a5de39",
			"rawModeData": ""
		},
		{
			"id": "a9749359-d4dc-c711-69dd-21ba770c786f",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/tags?maxItems=-1",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(400);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459515669070,
			"name": "Negative: Retrieve tags with negative maxItems",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "5931e5e3-f213-7568-2549-1babafbcf264"
		},
		{
			"id": "ad1ed76d-8e76-b5f8-27c1-0cfe14141c2b",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/tags/{{tagId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'TagEntry';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        it('expect to have values', function(){\n            expect(response.body.entry.tag,\"tag\").equals(\"tag 1\");\n            expect(response.body.entry.id,\"id\").equals(globals[\"tagId\"]);\n        });\n    });\n});",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"time": 1459258810112,
			"name": "Positive: Retrieve tag",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "e0c192e6-40a9-2708-073a-01a9ee9be90e",
			"timestamp": null
		},
		{
			"id": "b2d68136-7a67-e5ce-3430-cbd9fb9929d2",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/tags/{{tagId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(404);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"time": 1459258838520,
			"name": "Negative: Retrieve deleted tag",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "39a8f64e-3960-2b03-5d13-3bff9b2d0bd7",
			"timestamp": null
		},
		{
			"id": "b839ffc4-b0e6-2d31-01b9-5fed064f6a56",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/tags?skipCount=2",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'TagEntry';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        // compare with loaded ones\n        var globalVar = \"tags\";\n        var tmp = JSON.parse(globals[globalVar]);\n        tmp = tmp.list.entries.slice(2);\n        it('expect list.entries to equal ' + globalVar + '.list.entries[2:]', function() {\n            result = expect(JSON.stringify(response.body.list.entries),globalVar).to.deep.equal(JSON.stringify(tmp));\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"time": 1459420989118,
			"name": "Positive: Retrieve but skip the first 2 tags",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "5931e5e3-f213-7568-2549-1babafbcf264",
			"timestamp": null
		},
		{
			"id": "c027457e-8501-7f8c-3abf-9b29f1c77831",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/tags",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(400);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459505010658,
			"name": "Negative: Add tag with empty body",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"rawModeData": "{\n}",
			"folder": "211911ed-8af1-9e7c-2781-6b08384ea2f6"
		},
		{
			"id": "c2c2dfef-c846-6faf-0e4b-c4f45cc63743",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/tags?skipCount=0&maxItems=2",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'TagEntry';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        // compare with loaded ones\n        var globalVar = \"tags\";\n        var tmp = JSON.parse(globals[globalVar]);\n        tmp = tmp.list.entries.slice(0,2);\n        it('expect list.entries to equal ' + globalVar + '.list.entries[0:1]', function() {\n            result = expect(JSON.stringify(response.body.list.entries),globalVar).to.deep.equal(JSON.stringify(tmp));\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"time": 1459420938364,
			"name": "Positive: Retrieve only last 2 tags",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "5931e5e3-f213-7568-2549-1babafbcf264",
			"timestamp": null
		},
		{
			"id": "c815f304-bac3-d4a5-b047-6302475ba657",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/other-network.com/public/alfresco/versions/1/tags",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(401);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459885017267,
			"name": "Negative: Retrieve network tags from not joined network",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": []
		},
		{
			"id": "cdcd87e5-3b04-991b-3bd6-641342a07c48",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/tags/invalid-id",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(404);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459885107434,
			"name": "Negative: Update tag with invalid id",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"rawModeData": "{\n  \"tag\": \"Updated side tag 1\"\n}"
		},
		{
			"id": "cea66829-3078-c038-f565-444704052aef",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/tags/invalid-id",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(404);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459885298183,
			"name": "Negative: Retrieve tag with invalid tag id",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": []
		},
		{
			"id": "d1ed42c8-9bb1-5e6d-8bab-df74e2440eb1",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/tags/{{tagId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1458742054303,
			"name": "Delete tagId",
			"description": "Should be already deleted!",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "0b13f76c-db73-017b-813a-6354c9a5de39",
			"rawModeData": ""
		},
		{
			"id": "d1f298f7-7de4-9a0d-e238-ae7118ca12ca",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Added comment to node\"] = responseCode.code === 201; \n\npostman.setGlobalVariable(\"commentId\", JSON.parse(responseBody).entry.id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459884600498,
			"name": "Add comment to a node",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"rawModeData": "{\n    \"content\": \"This is a comment\"\n}"
		},
		{
			"id": "dc896e99-986a-97f9-8cec-3f375a6713a6",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/tags",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'TagEntry';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(201);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n          \n        it('expect to have values', function(){\n            expect(response.body.entry.tag,\"tag\").equals(\"tag 1\");\n        });\n    });\n});\n\npostman.setGlobalVariable(\"tagId\", response.body.entry.id);",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"time": 1459258580513,
			"name": "Positive: Add tag",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "211911ed-8af1-9e7c-2781-6b08384ea2f6",
			"timestamp": null,
			"rawModeData": "{\n    \"tag\":\"tag 1\"\n}\n"
		},
		{
			"id": "e07db543-728c-b206-4217-e0dcd8b62010",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/tags/{{tagId5}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1458742413933,
			"name": "Delete tagId5",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "0b13f76c-db73-017b-813a-6354c9a5de39",
			"rawModeData": ""
		},
		{
			"id": "e20023bf-d43f-76e7-7ba6-a60a3650640e",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/tags/{{tagId6}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1458742471105,
			"name": "Delete tagId6",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "0b13f76c-db73-017b-813a-6354c9a5de39",
			"rawModeData": ""
		},
		{
			"id": "e2a44e44-7792-6244-f21d-117e3ac0c350",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/tags",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(400);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"time": 1459258732866,
			"name": "Negative: Add empty tag",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "211911ed-8af1-9e7c-2781-6b08384ea2f6",
			"timestamp": null,
			"rawModeData": "{\n    \"tag\":\"\"\n}"
		},
		{
			"id": "ef6f76c3-9ba9-394a-049f-86155c4b4f1d",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/tags/{{tagId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(400);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459258800040,
			"name": "Negative: Update tag with empty content",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "ce75f200-34cc-ba3c-7c4e-f0c014b2d2b8",
			"rawModeData": "{\n  \"tag\": \"\"\n}"
		},
		{
			"id": "f44e518e-223a-a75c-1af2-ee07386bc176",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/tags?skipCount=-1",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(400);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459516245351,
			"name": "Negative: Retrieve network tags with negative skipCount",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"folder": "af50770f-72ad-b517-396e-f3168740e060"
		},
		{
			"id": "faf07abc-69d1-bf92-59d8-df843b6f2130",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/invalid-id/tags",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(404);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459884836409,
			"name": "Negative: Add tag with invalid node id",
			"description": "",
			"collectionId": "084f647f-eadb-e7bf-0eae-22867d9e3763",
			"responses": [],
			"rawModeData": "{\n    \"tag\" : \"tag 1\"\n}"
		}
	]
}