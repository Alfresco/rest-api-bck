{
	"id": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
	"name": "Tests - Comments",
	"description": "Tests for the Comments REST API",
	"order": [],
	"folders": [
		{
			"id": "817f81a4-b018-5dfa-edde-033e9a15f3ea",
			"name": "1 POST /nodes/{nodeId}/comments",
			"description": "",
			"order": [
				"7818587d-54c0-02d8-6021-54f6e026cbb3",
				"f4082a0e-2927-6454-1f6a-97265ef8c825",
				"31d34ce0-55f5-026c-aa0e-e6aee18c719e",
				"71339f2f-5f56-a6bf-fa4c-828744de6f4d",
				"6c1424aa-5ac8-bc06-878d-005027abcd90",
				"56caaa49-393e-bb7d-cd75-79da30328302",
				"e11b36e1-589c-ca21-f88e-d89fd2b3b682",
				"6a6848e5-0dac-fbf6-8b76-76053a845d30",
				"539cd263-8f8a-a32d-92d3-f58e7f68723e"
			],
			"owner": "250102",
			"collectionId": "3a0c3f70-f218-a7c3-aa64-bd1fec325d83"
		},
		{
			"id": "f4efdbcc-7d0a-b2c4-8a9e-f5125fde28d0",
			"name": "2 GET /nodes/{nodeId}/comments",
			"description": "",
			"order": [
				"bec928eb-0b77-8264-621f-c731180cd3f5",
				"8846ede7-88bf-3d85-f2c5-3f927f868111",
				"2db1277c-ebda-fe88-cf52-c742e3658a37",
				"21a47d54-db59-b8b8-eb68-c9811c31ba7e",
				"0b4e6ebb-b976-132a-eb12-f301f119b198",
				"3e63040c-1652-0459-3a62-e34e0f9321b3",
				"43f136d0-8011-bc62-e157-d135a0c4e5c6",
				"b69423a2-cdd7-462f-3ad3-0bf94b2d9ea1"
			],
			"owner": "250102",
			"collectionId": "3a0c3f70-f218-a7c3-aa64-bd1fec325d83"
		},
		{
			"id": "83c027ba-122b-9b68-3baf-a9f388d53847",
			"name": "3 PUT /nodes/{nodeId}/comments/{commentId}",
			"description": "",
			"order": [
				"0fcb7bee-589c-dd20-dc20-9295f695da59",
				"62b1f554-7d3e-0822-ed11-858a5e84d975",
				"17e38fda-723e-3237-bd10-aab0aba380ff",
				"ff670a10-f924-e83c-7652-8320384d6329",
				"3806eda4-03e1-720f-1d83-9fab6598633d"
			],
			"owner": "250102",
			"collectionId": "3a0c3f70-f218-a7c3-aa64-bd1fec325d83"
		},
		{
			"id": "be276e3d-4086-7be8-bf70-0436c7dfdcfa",
			"name": "4 DELETE /nodes/{nodeId}/comments/{commentId}",
			"description": "",
			"order": [
				"43dc7c2c-7593-d953-3402-20a679a3df05",
				"6e29a6eb-1948-badc-797c-4eb0110cb0ce",
				"4b2db9d2-58ea-63ab-adf0-788bfd948ec1",
				"e41e5cee-4106-ae25-03c9-c6479d8c30b4",
				"50b0d906-fac6-20c8-0aee-cf490a5fa7d9"
			],
			"owner": "250102",
			"collectionId": "3a0c3f70-f218-a7c3-aa64-bd1fec325d83"
		},
		{
			"id": "86686d7b-d1d4-3f36-26ee-dfa814e5d5ee",
			"name": "5 After",
			"description": "",
			"order": [
				"ac318914-8df7-afd8-c5de-e9c440a7b212",
				"51344cfc-129f-8f80-ae1f-72cc4b8fb107",
				"3ab9eb21-1e55-8736-e58c-0f5a73d37ae3",
				"9de5a9b4-4ec8-b8a0-2a6c-f53359957f7b",
				"81853623-f8ac-f0cc-8411-a78db0eb7512"
			],
			"owner": "250102",
			"collectionId": "3a0c3f70-f218-a7c3-aa64-bd1fec325d83"
		}
	],
	"timestamp": 1455914658101,
	"owner": "250102",
	"public": false,
	"hasRequests": true,
	"requests": [
		{
			"id": "0b4e6ebb-b976-132a-eb12-f301f119b198",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}};3.0/comments",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'CommentPaging';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        describe('positive values check:', function() {\n            it('test 1', function() {\n                expect(response.body.list.entries).to.have.length.above(0,'entries length');\n            });\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245731875,
			"name": "Positive: Retrieve comments with version number",
			"description": "",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"folder": "f4efdbcc-7d0a-b2c4-8a9e-f5125fde28d0"
		},
		{
			"id": "0fcb7bee-589c-dd20-dc20-9295f695da59",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/{{commentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'CommentEntry';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        it('expect to have values', function(){\n            expect(response.body.entry.edited,\"edited\").to.be.true;\n            expect(response.body.entry.canEdit,\"canEdit\").to.be.true;\n            expect(response.body.entry.canDelete,\"canDelete\").to.be.true;\n            expect(response.body.entry.content,\"content\").equals(\"Updated comment\");\n            expect(response.body.entry.createdBy.id,\"createdBy.id\").equals(postman.getEnvironmentVariable(\"user1UserName\"));\n            expect(response.body.entry.createdBy.firstName,\"createdBy.firstname\").equals(postman.getEnvironmentVariable(\"user1FirstName\"));\n            expect(response.body.entry.createdBy.lastName,\"createdBy.lastName\").equals(postman.getEnvironmentVariable(\"user1LastName\"));\n            expect(response.body.entry.createdBy.email,\"createdBy.email\").equals(postman.getEnvironmentVariable(\"user1Email\"));\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245698037,
			"name": "Positive: Update comment",
			"description": "",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"rawModeData": "{\n  \"content\": \"Updated comment\"\n}",
			"folder": "83c027ba-122b-9b68-3baf-a9f388d53847"
		},
		{
			"id": "17e38fda-723e-3237-bd10-aab0aba380ff",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/invalid-id/comments/{{commentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(404);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459795235114,
			"name": "Negative: Update comment with invalid node",
			"description": "",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"rawModeData": "{\n  \"content\": \"ӉӋӐӞ\"\n}",
			"folder": "83c027ba-122b-9b68-3baf-a9f388d53847"
		},
		{
			"id": "21a47d54-db59-b8b8-eb68-c9811c31ba7e",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments?skipCount=2",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'CommentPaging';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        // compare with loaded comments before\n        var comments = JSON.parse(postman.getGlobalVariable('comments'));\n        comments = comments.list.entries.slice(2);\n        it('expect list.entries to equal comments.list.entries[3:]', function() {\n            result = expect(JSON.stringify(response.body.list.entries),'comments').to.deep.equal(JSON.stringify(comments));\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459262632808,
			"name": "Positive: Retrieve comments but skip the first 2",
			"description": "",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"folder": "f4efdbcc-7d0a-b2c4-8a9e-f5125fde28d0"
		},
		{
			"id": "2db1277c-ebda-fe88-cf52-c742e3658a37",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments?skipCount=0&maxItems=2",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'CommentPaging';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        it('expect list.entries to have lengthOf 2', function() {\n            expect(response.body.list.entries,'entries length').to.have.lengthOf(2);\n        });\n        \n        // compare with loaded comments before\n        var comments = JSON.parse(postman.getGlobalVariable('comments'));\n        comments = comments.list.entries.slice(0, 2);\n        it('expect list.entries[0-1] to equal comments.list.entries[0-1]', function() {\n            result = expect(response.body.list.entries.slice(0, 2),'comments 1-2').to.deep.equal(comments);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245722091,
			"name": "Positive: Retrieve only last 2 comments",
			"description": "",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"folder": "f4efdbcc-7d0a-b2c4-8a9e-f5125fde28d0"
		},
		{
			"id": "31d34ce0-55f5-026c-aa0e-e6aee18c719e",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'CommentEntry';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(201);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        it('expect to have values', function(){\n            expect(response.body.entry.edited,\"edited\").to.be.false;\n            expect(response.body.entry.canEdit,\"canEdit\").to.be.true;\n            expect(response.body.entry.canDelete,\"canDelete\").to.be.true;\n            expect(response.body.entry.content,\"content\").equals(\"?*^&*(,\");\n            expect(response.body.entry.createdBy.id,\"createdBy.id\").equals(postman.getEnvironmentVariable(\"user1UserName\"));\n            expect(response.body.entry.createdBy.firstName,\"createdBy.firstname\").equals(postman.getEnvironmentVariable(\"user1FirstName\"));\n            expect(response.body.entry.createdBy.lastName,\"createdBy.lastName\").equals(postman.getEnvironmentVariable(\"user1LastName\"));\n            expect(response.body.entry.createdBy.email,\"createdBy.email\").equals(postman.getEnvironmentVariable(\"user1Email\"));\n        });\n    });\n});\n\npostman.setGlobalVariable(\"commentId2\", response.body.entry.id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245752267,
			"name": "Positive: Add special characters comment",
			"description": "special characters\n\"?*^&*(,\"",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"rawModeData": "  {\n    \"content\": \"?*^&*(,\"\n  }",
			"folder": "817f81a4-b018-5dfa-edde-033e9a15f3ea"
		},
		{
			"id": "3806eda4-03e1-720f-1d83-9fab6598633d",
			"headers": "Authorization: {{user2Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/{{commentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(403);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245710508,
			"name": "Negative: Update comment from other person",
			"description": "",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"rawModeData": "{\n  \"content\": \"Updated comment\"\n}",
			"folder": "83c027ba-122b-9b68-3baf-a9f388d53847"
		},
		{
			"id": "3ab9eb21-1e55-8736-e58c-0f5a73d37ae3",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/{{commentId3}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1458660101131,
			"name": "Delete commentId3",
			"description": "",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"rawModeData": "",
			"folder": "86686d7b-d1d4-3f36-26ee-dfa814e5d5ee"
		},
		{
			"id": "3e63040c-1652-0459-3a62-e34e0f9321b3",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/invalid/comments",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(404);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245734732,
			"name": "Negative: Retrieve comments from invalid node",
			"description": "",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"folder": "f4efdbcc-7d0a-b2c4-8a9e-f5125fde28d0"
		},
		{
			"id": "43dc7c2c-7593-d953-3402-20a679a3df05",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/{{commentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\ndescribe('\"' + request + '\"', function() {\n    it('should return a valid status', function() {\n        response.should.have.status(204);\n        response.should.be.json;\n    });\n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245683917,
			"name": "Positive: Delete comment",
			"description": "",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"rawModeData": "",
			"folder": "be276e3d-4086-7be8-bf70-0436c7dfdcfa"
		},
		{
			"id": "43f136d0-8011-bc62-e157-d135a0c4e5c6",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}};pwc/comments",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(404);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245737467,
			"name": "Negative: Retrieve comments from invalid node 2",
			"description": "",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"folder": "f4efdbcc-7d0a-b2c4-8a9e-f5125fde28d0"
		},
		{
			"id": "4b2db9d2-58ea-63ab-adf0-788bfd948ec1",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/invalid/comments/{{commentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(404);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459795207269,
			"name": "Negative: Delete comment with invalid node",
			"description": "",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"rawModeData": "",
			"folder": "be276e3d-4086-7be8-bf70-0436c7dfdcfa"
		},
		{
			"id": "50b0d906-fac6-20c8-0aee-cf490a5fa7d9",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/{{commentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(405);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1460489218813,
			"name": "Negative: Retrieve deleted comment",
			"description": "",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": []
		},
		{
			"id": "51344cfc-129f-8f80-ae1f-72cc4b8fb107",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/{{commentId2}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1458660082435,
			"name": "Delete commentId2",
			"description": "",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"rawModeData": "",
			"folder": "86686d7b-d1d4-3f36-26ee-dfa814e5d5ee"
		},
		{
			"id": "539cd263-8f8a-a32d-92d3-f58e7f68723e",
			"headers": "Authorization: {{user2Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(403);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245774282,
			"name": "Negative: Add comment with no permission",
			"description": "Test Case cloud-1518",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"rawModeData": "{\n    \"content\": \"Test Comment 4\"\n}",
			"folder": "817f81a4-b018-5dfa-edde-033e9a15f3ea"
		},
		{
			"id": "56caaa49-393e-bb7d-cd75-79da30328302",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(400);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245762019,
			"name": "Negative: Add empty comment",
			"description": "content: \"\"",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"rawModeData": "  {\n    \"content\": \"\"\n  }",
			"folder": "817f81a4-b018-5dfa-edde-033e9a15f3ea"
		},
		{
			"id": "62b1f554-7d3e-0822-ed11-858a5e84d975",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/{{commentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'CommentEntry';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        it('expect to have values', function(){\n            expect(response.body.entry.edited,\"edited\").to.be.true;\n            expect(response.body.entry.canEdit,\"canEdit\").to.be.true;\n            expect(response.body.entry.canDelete,\"canDelete\").to.be.true;\n            expect(response.body.entry.content,\"content\").equals(\"ӉӋӐӞ\");\n            expect(response.body.entry.createdBy.id,\"createdBy.id\").equals(postman.getEnvironmentVariable(\"user1UserName\"));\n            expect(response.body.entry.createdBy.firstName,\"createdBy.firstname\").equals(postman.getEnvironmentVariable(\"user1FirstName\"));\n            expect(response.body.entry.createdBy.lastName,\"createdBy.lastName\").equals(postman.getEnvironmentVariable(\"user1LastName\"));\n            expect(response.body.entry.createdBy.email,\"createdBy.email\").equals(postman.getEnvironmentVariable(\"user1Email\"));\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245701244,
			"name": "Positive: Update comment with multi-byte content",
			"description": "",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"rawModeData": "{\n  \"content\": \"ӉӋӐӞ\"\n}",
			"folder": "83c027ba-122b-9b68-3baf-a9f388d53847"
		},
		{
			"id": "6a6848e5-0dac-fbf6-8b76-76053a845d30",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{tagId}}/comments",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// TODO: This will only work once SOLR is enabled for the embedded Tomcat\n\n/*\n\n// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(405);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n*/",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459800542427,
			"name": "Negative: Add comment to a tag (TODO)",
			"description": "",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"rawModeData": "{\n    \"content\": \"This is a comment\"\n}",
			"folder": "817f81a4-b018-5dfa-edde-033e9a15f3ea"
		},
		{
			"id": "6c1424aa-5ac8-bc06-878d-005027abcd90",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/invalid-id/comments",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(404);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459795251944,
			"name": "Negative: Add comment with invalid node",
			"description": "Test Case cloud-1518",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"rawModeData": "{\n    \"content\": \"Test Comment 4\"\n}",
			"folder": "817f81a4-b018-5dfa-edde-033e9a15f3ea"
		},
		{
			"id": "6e29a6eb-1948-badc-797c-4eb0110cb0ce",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/{{commentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(404);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245587192,
			"name": "Negative: Delete deleted comment",
			"description": "",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"rawModeData": "",
			"folder": "be276e3d-4086-7be8-bf70-0436c7dfdcfa"
		},
		{
			"id": "71339f2f-5f56-a6bf-fa4c-828744de6f4d",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{folderNodeId}}/comments",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'CommentEntry';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(201);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        it('expect to have values', function(){\n            expect(response.body.entry.edited,\"edited\").to.be.false;\n            expect(response.body.entry.canEdit,\"canEdit\").to.be.true;\n            expect(response.body.entry.canDelete,\"canDelete\").to.be.true;\n            expect(response.body.entry.content,\"content\").equals(\"This is a comment\");\n            expect(response.body.entry.createdBy.id,\"createdBy.id\").equals(postman.getEnvironmentVariable(\"user1UserName\"));\n            expect(response.body.entry.createdBy.firstName,\"createdBy.firstname\").equals(postman.getEnvironmentVariable(\"user1FirstName\"));\n            expect(response.body.entry.createdBy.lastName,\"createdBy.lastName\").equals(postman.getEnvironmentVariable(\"user1LastName\"));\n            expect(response.body.entry.createdBy.email,\"createdBy.email\").equals(postman.getEnvironmentVariable(\"user1Email\"));\n        });\n    });\n});\n\npostman.setGlobalVariable(\"commentId3\", response.body.entry.id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245754939,
			"name": "Positive: Add comment to a folder",
			"description": "",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"rawModeData": "  {\n    \"content\": \"This is a comment\"\n  }",
			"folder": "817f81a4-b018-5dfa-edde-033e9a15f3ea"
		},
		{
			"id": "7818587d-54c0-02d8-6021-54f6e026cbb3",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'CommentEntry';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(201);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n          \n        it('expect to have values', function(){\n            expect(response.body.entry.edited,\"edited\").to.be.false;\n            expect(response.body.entry.canEdit,\"canEdit\").to.be.true;\n            expect(response.body.entry.canDelete,\"canDelete\").to.be.true;\n            expect(response.body.entry.content,\"content\").equals(\"This is a comment\");\n            expect(response.body.entry.createdBy.id,\"createdBy.id\").equals(postman.getEnvironmentVariable(\"user1UserName\"));\n            expect(response.body.entry.createdBy.firstName,\"createdBy.firstname\").equals(postman.getEnvironmentVariable(\"user1FirstName\"));\n            expect(response.body.entry.createdBy.lastName,\"createdBy.lastName\").equals(postman.getEnvironmentVariable(\"user1LastName\"));\n            expect(response.body.entry.createdBy.email,\"createdBy.email\").equals(postman.getEnvironmentVariable(\"user1Email\"));\n        });\n    });\n});\n\npostman.setGlobalVariable(\"commentId\", response.body.entry.id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245746851,
			"name": "Positive: Add comment to a node",
			"description": "",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"rawModeData": "{\n    \"content\": \"This is a comment\"\n}",
			"folder": "817f81a4-b018-5dfa-edde-033e9a15f3ea"
		},
		{
			"id": "81853623-f8ac-f0cc-8411-a78db0eb7512",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/{{commentId5}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1458660203408,
			"name": "Delete commentId5",
			"description": "",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"rawModeData": "",
			"folder": "86686d7b-d1d4-3f36-26ee-dfa814e5d5ee"
		},
		{
			"id": "8846ede7-88bf-3d85-f2c5-3f927f868111",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments?skipCount=0&maxItems=2",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'CommentPaging';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        it('expect list.entries to have lengthOf 2', function() {\n            expect(response.body.list.entries,'entries length').to.have.lengthOf(2);\n        });\n    });\n});",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245719372,
			"name": "Positive: Retrieve 2 comments from node",
			"description": "",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"folder": "f4efdbcc-7d0a-b2c4-8a9e-f5125fde28d0"
		},
		{
			"id": "9de5a9b4-4ec8-b8a0-2a6c-f53359957f7b",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/{{commentId4}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1458660188592,
			"name": "Delete commentId4",
			"description": "",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"rawModeData": "",
			"folder": "86686d7b-d1d4-3f36-26ee-dfa814e5d5ee"
		},
		{
			"id": "ac318914-8df7-afd8-c5de-e9c440a7b212",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/{{commentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1458659998435,
			"name": "Delete commentId",
			"description": "Should be already deleted!",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"rawModeData": "",
			"folder": "86686d7b-d1d4-3f36-26ee-dfa814e5d5ee"
		},
		{
			"id": "b69423a2-cdd7-462f-3ad3-0bf94b2d9ea1",
			"headers": "Authorization: {{user2Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(403);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245740387,
			"name": "Negative: Retrieve comments from a not joined site",
			"description": "",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"folder": "f4efdbcc-7d0a-b2c4-8a9e-f5125fde28d0"
		},
		{
			"id": "bec928eb-0b77-8264-621f-c731180cd3f5",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'CommentPaging';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        describe('positive values check:', function() {\n            it('test 1', function() {\n                expect(response.body.list.entries).to.have.length.above(0,'entries length');\n            });\n        });\n    });\n});\n\npostman.setGlobalVariable('comments',JSON.stringify(response.body));",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245715660,
			"name": "Positive: Retrieve comments from node",
			"description": "",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"folder": "f4efdbcc-7d0a-b2c4-8a9e-f5125fde28d0"
		},
		{
			"id": "e11b36e1-589c-ca21-f88e-d89fd2b3b682",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{commentId}}/comments",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(405);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245767275,
			"name": "Negative: Add comment to a comment",
			"description": "",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"rawModeData": "  {\n    \"content\": \"This is a comment\"\n  }",
			"folder": "817f81a4-b018-5dfa-edde-033e9a15f3ea"
		},
		{
			"id": "e41e5cee-4106-ae25-03c9-c6479d8c30b4",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/invalid-id",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(404);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459795222903,
			"name": "Negative: Delete comment with invalid comment id",
			"description": "",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"rawModeData": "",
			"folder": "be276e3d-4086-7be8-bf70-0436c7dfdcfa"
		},
		{
			"id": "f4082a0e-2927-6454-1f6a-97265ef8c825",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'CommentPaging';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(201);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        it('first comment expect to have values', function(){\n            var i = 0;\n            postman.setGlobalVariable('commentId4',response.body.list.entries[i].entry.id);\n            expect(response.body.list.entries[i].entry.edited,\"edited\").to.be.false;\n            expect(response.body.list.entries[i].entry.canEdit,\"canEdit\").to.be.true;\n            expect(response.body.list.entries[i].entry.canDelete,\"canDelete\").to.be.true;\n            expect(response.body.list.entries[i].entry.content,\"content\").equals(\"ڠڡڢ\");\n            expect(response.body.list.entries[i].entry.createdBy.id,\"createdBy.id\").equals(postman.getEnvironmentVariable(\"user1UserName\"));\n            expect(response.body.list.entries[i].entry.createdBy.firstName,\"createdBy.firstname\").equals(postman.getEnvironmentVariable(\"user1FirstName\"));\n            expect(response.body.list.entries[i].entry.createdBy.lastName,\"createdBy.lastName\").equals(postman.getEnvironmentVariable(\"user1LastName\"));\n            expect(response.body.list.entries[i].entry.createdBy.email,\"createdBy.email\").equals(postman.getEnvironmentVariable(\"user1Email\"));\n        });\n        \n        it('second comment expect to have values', function(){\n            var i = 1;\n            postman.setGlobalVariable('commentId5',response.body.list.entries[i].entry.id);\n            expect(response.body.list.entries[i].entry.edited,\"edited\").to.be.false;\n            expect(response.body.list.entries[i].entry.canEdit,\"canEdit\").to.be.true;\n            expect(response.body.list.entries[i].entry.canDelete,\"canDelete\").to.be.true;\n            expect(response.body.list.entries[i].entry.content,\"content\").equals(\"\\u67e5\\u770b\\u5168\\u90e8\");\n            expect(response.body.list.entries[i].entry.createdBy.id,\"createdBy.id\").equals(postman.getEnvironmentVariable(\"user1UserName\"));\n            expect(response.body.list.entries[i].entry.createdBy.firstName,\"createdBy.firstame\").equals(postman.getEnvironmentVariable(\"user1FirstName\"));\n            expect(response.body.list.entries[i].entry.createdBy.lastName,\"createdBy.lastName\").equals(postman.getEnvironmentVariable(\"user1LastName\"));\n            expect(response.body.list.entries[i].entry.createdBy.email,\"createdBy.email\").equals(postman.getEnvironmentVariable(\"user1Email\"));\n        });\n    });\n});",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245749411,
			"name": "Positive: Add multi-byte characters comments",
			"description": "multi-byte characters",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"rawModeData": "[\n  {\n    \"content\": \"ڠڡڢ\"\n  },\n  {\n    \"content\": \"\\u67e5\\u770b\\u5168\\u90e8\"\n  }\n]",
			"folder": "817f81a4-b018-5dfa-edde-033e9a15f3ea"
		},
		{
			"id": "ff670a10-f924-e83c-7652-8320384d6329",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/{{commentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(400);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245707349,
			"name": "Negative: Update comment with empty content",
			"description": "content : \"\"",
			"collectionId": "8f205d28-1e90-9b81-1fd6-5cbc498a6ecf",
			"responses": [],
			"rawModeData": "{\n  \"content\": \"\"\n}",
			"folder": "83c027ba-122b-9b68-3baf-a9f388d53847"
		}
	]
}