{
	"id": "d39e4349-1996-14f7-932c-4aac4665f1f1",
	"name": "Tests - Comments",
	"description": "Tests for the Comments REST API",
	"order": [],
	"folders": [
		{
			"id": "5206f926-88e4-6e83-73f3-62d1bbb4fa87",
			"name": "1 POST /nodes/{nodeId}/comments",
			"description": "",
			"order": [
				"856921fa-1a20-0319-31ee-891e2ca01279",
				"34f8ab96-cd06-ebc8-3857-40402b008bad",
				"c0d66d6c-c175-3c60-6679-2e9a3e5d46c8",
				"2b1827c9-1a39-e570-3d56-1e132f0afa92",
				"5f5700d4-6d53-abe4-520b-72042c4a632a",
				"67bf072e-c64f-d1eb-ab88-1e3047d10a1c",
				"be50d15b-0b75-23df-66f9-5edc06dc34a1",
				"adec834a-d5a5-0f04-c67f-08b3e58645f8",
				"a3aca0d7-1369-395e-5fbb-54228cf2d321"
			],
			"owner": "250102",
			"collectionId": "3a0c3f70-f218-a7c3-aa64-bd1fec325d83"
		},
		{
			"id": "c3a573d2-660f-144f-7006-cc2a54dd1d21",
			"name": "2 GET /nodes/{nodeId}/comments",
			"description": "",
			"order": [
				"65ee21fb-57e5-6bbf-9e40-9d2489014fa9",
				"1fc47aab-8037-4361-9cf4-3b6134dceede",
				"a511a1c8-6159-56c0-e148-94cd3c1057d0",
				"c972f14e-3aef-ef15-893c-a18e64c55718",
				"c5763ea7-cc15-8042-6081-e0b7b32ecf96",
				"243bcea2-1f93-fc03-23f9-d0533f8fa2c2",
				"c1d9e295-4f5a-f302-0cb0-d67bce57ae63",
				"94bb2330-678b-8968-972c-22b5915ded82"
			],
			"owner": "250102",
			"collectionId": "3a0c3f70-f218-a7c3-aa64-bd1fec325d83"
		},
		{
			"id": "a1875a05-3896-6d38-4da1-7f3a9c47b382",
			"name": "3 PUT /nodes/{nodeId}/comments/{commentId}",
			"description": "",
			"order": [
				"5e2a1879-b3e6-378f-2af0-22698aeecfbb",
				"1fb53106-bd4d-7292-5ad0-04e5d162c574",
				"67005591-86a4-ca02-7de6-3467d0e56ed0",
				"b6d8bf4c-2cf5-83e7-e3a0-b309a27d30f7",
				"394e237e-c3e8-a773-9b4f-8403b6047209"
			],
			"owner": "250102",
			"collectionId": "3a0c3f70-f218-a7c3-aa64-bd1fec325d83"
		},
		{
			"id": "d8dafb0e-efac-48f9-b2ee-0a576c9c55e0",
			"name": "4 DELETE /nodes/{nodeId}/comments/{commentId}",
			"description": "",
			"order": [
				"964f45dc-55e2-c654-47b8-57a07a7b5af5",
				"421563b3-db18-cfbd-2d7c-ac6f7e35e836",
				"1809e1d4-07b4-c579-f21c-e65b1fb55d26",
				"730d1736-dcdb-ce7c-de0a-5d1a5a42edf9",
				"831ff70f-6684-68b0-37d4-11e55dc25a48"
			],
			"owner": "250102",
			"collectionId": "3a0c3f70-f218-a7c3-aa64-bd1fec325d83"
		},
		{
			"id": "442163ce-4942-a1d1-c1f5-81ca362858e5",
			"name": "5 After",
			"description": "",
			"order": [
				"a7f12eed-260a-2135-cd3d-e758b04621b9",
				"43fd6dfd-836a-91ce-1eab-17977552dbb9",
				"b3a84a4f-b95f-b543-67c9-c03c1e557b69",
				"e4f452ed-aed3-e77a-0284-6c67bef39c3c",
				"abe6d8fc-5392-106e-3a42-18e146b5e69e"
			],
			"owner": "250102",
			"collectionId": "3a0c3f70-f218-a7c3-aa64-bd1fec325d83"
		}
	],
	"timestamp": 1455914658101,
	"owner": "250102",
	"remoteLink": "",
	"public": false,
	"requests": [
		{
			"id": "1809e1d4-07b4-c579-f21c-e65b1fb55d26",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/invalid/comments/{{commentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(404);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459795207269,
			"name": "Negative: Delete comment with invalid node",
			"description": "",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "1fb53106-bd4d-7292-5ad0-04e5d162c574",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/{{commentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'CommentEntry';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        it('expect to have values', function(){\n            expect(response.body.entry.edited,\"edited\").to.be.true;\n            expect(response.body.entry.canEdit,\"canEdit\").to.be.true;\n            expect(response.body.entry.canDelete,\"canDelete\").to.be.true;\n            expect(response.body.entry.content,\"content\").equals(\"ӉӋӐӞ\");\n            expect(response.body.entry.createdBy.id,\"createdBy.id\").equals(postman.getEnvironmentVariable(\"user1UserName\"));\n            expect(response.body.entry.createdBy.firstName,\"createdBy.firstname\").equals(postman.getEnvironmentVariable(\"user1FirstName\"));\n            expect(response.body.entry.createdBy.lastName,\"createdBy.lastName\").equals(postman.getEnvironmentVariable(\"user1LastName\"));\n            expect(response.body.entry.createdBy.email,\"createdBy.email\").equals(postman.getEnvironmentVariable(\"user1Email\"));\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245701244,
			"name": "Positive: Update comment with multi-byte content",
			"description": "",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"rawModeData": "{\n  \"content\": \"ӉӋӐӞ\"\n}",
			"folder": "a1875a05-3896-6d38-4da1-7f3a9c47b382"
		},
		{
			"id": "1fc47aab-8037-4361-9cf4-3b6134dceede",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments?skipCount=0&maxItems=2",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'CommentPaging';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        it('expect list.entries to have lengthOf 2', function() {\n            expect(response.body.list.entries,'entries length').to.have.lengthOf(2);\n        });\n    });\n});",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245719372,
			"name": "Positive: Retrieve 2 comments from node",
			"description": "",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"folder": "c3a573d2-660f-144f-7006-cc2a54dd1d21"
		},
		{
			"id": "243bcea2-1f93-fc03-23f9-d0533f8fa2c2",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/invalid/comments",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(404);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245734732,
			"name": "Negative: Retrieve comments from invalid node",
			"description": "",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"folder": "c3a573d2-660f-144f-7006-cc2a54dd1d21"
		},
		{
			"id": "2b1827c9-1a39-e570-3d56-1e132f0afa92",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{folderNodeId}}/comments",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'CommentEntry';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(201);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        it('expect to have values', function(){\n            expect(response.body.entry.edited,\"edited\").to.be.false;\n            expect(response.body.entry.canEdit,\"canEdit\").to.be.true;\n            expect(response.body.entry.canDelete,\"canDelete\").to.be.true;\n            expect(response.body.entry.content,\"content\").equals(\"This is a comment\");\n            expect(response.body.entry.createdBy.id,\"createdBy.id\").equals(postman.getEnvironmentVariable(\"user1UserName\"));\n            expect(response.body.entry.createdBy.firstName,\"createdBy.firstname\").equals(postman.getEnvironmentVariable(\"user1FirstName\"));\n            expect(response.body.entry.createdBy.lastName,\"createdBy.lastName\").equals(postman.getEnvironmentVariable(\"user1LastName\"));\n            expect(response.body.entry.createdBy.email,\"createdBy.email\").equals(postman.getEnvironmentVariable(\"user1Email\"));\n        });\n    });\n});\n\npostman.setGlobalVariable(\"commentId3\", response.body.entry.id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245754939,
			"name": "Positive: Add comment to a folder",
			"description": "",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"rawModeData": "  {\n    \"content\": \"This is a comment\"\n  }",
			"folder": "5206f926-88e4-6e83-73f3-62d1bbb4fa87"
		},
		{
			"id": "34f8ab96-cd06-ebc8-3857-40402b008bad",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'CommentPaging';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(201);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        it('first comment expect to have values', function(){\n            var i = 0;\n            postman.setGlobalVariable('commentId4',response.body.list.entries[i].entry.id);\n            expect(response.body.list.entries[i].entry.edited,\"edited\").to.be.false;\n            expect(response.body.list.entries[i].entry.canEdit,\"canEdit\").to.be.true;\n            expect(response.body.list.entries[i].entry.canDelete,\"canDelete\").to.be.true;\n            expect(response.body.list.entries[i].entry.content,\"content\").equals(\"ڠڡڢ\");\n            expect(response.body.list.entries[i].entry.createdBy.id,\"createdBy.id\").equals(postman.getEnvironmentVariable(\"user1UserName\"));\n            expect(response.body.list.entries[i].entry.createdBy.firstName,\"createdBy.firstname\").equals(postman.getEnvironmentVariable(\"user1FirstName\"));\n            expect(response.body.list.entries[i].entry.createdBy.lastName,\"createdBy.lastName\").equals(postman.getEnvironmentVariable(\"user1LastName\"));\n            expect(response.body.list.entries[i].entry.createdBy.email,\"createdBy.email\").equals(postman.getEnvironmentVariable(\"user1Email\"));\n        });\n        \n        it('second comment expect to have values', function(){\n            var i = 1;\n            postman.setGlobalVariable('commentId5',response.body.list.entries[i].entry.id);\n            expect(response.body.list.entries[i].entry.edited,\"edited\").to.be.false;\n            expect(response.body.list.entries[i].entry.canEdit,\"canEdit\").to.be.true;\n            expect(response.body.list.entries[i].entry.canDelete,\"canDelete\").to.be.true;\n            expect(response.body.list.entries[i].entry.content,\"content\").equals(\"\\u67e5\\u770b\\u5168\\u90e8\");\n            expect(response.body.list.entries[i].entry.createdBy.id,\"createdBy.id\").equals(postman.getEnvironmentVariable(\"user1UserName\"));\n            expect(response.body.list.entries[i].entry.createdBy.firstName,\"createdBy.firstame\").equals(postman.getEnvironmentVariable(\"user1FirstName\"));\n            expect(response.body.list.entries[i].entry.createdBy.lastName,\"createdBy.lastName\").equals(postman.getEnvironmentVariable(\"user1LastName\"));\n            expect(response.body.list.entries[i].entry.createdBy.email,\"createdBy.email\").equals(postman.getEnvironmentVariable(\"user1Email\"));\n        });\n    });\n});",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245749411,
			"name": "Positive: Add multi-byte characters comments",
			"description": "multi-byte characters",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"rawModeData": "[\n  {\n    \"content\": \"ڠڡڢ\"\n  },\n  {\n    \"content\": \"\\u67e5\\u770b\\u5168\\u90e8\"\n  }\n]",
			"folder": "5206f926-88e4-6e83-73f3-62d1bbb4fa87"
		},
		{
			"id": "394e237e-c3e8-a773-9b4f-8403b6047209",
			"headers": "Authorization: {{user2Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/{{commentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(403);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245710508,
			"name": "Negative: Update comment from other person",
			"description": "",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"rawModeData": "{\n  \"content\": \"Updated comment\"\n}",
			"folder": "a1875a05-3896-6d38-4da1-7f3a9c47b382"
		},
		{
			"id": "421563b3-db18-cfbd-2d7c-ac6f7e35e836",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/{{commentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(404);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245587192,
			"name": "Negative: Delete deleted comment",
			"description": "",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"rawModeData": "",
			"folder": "d8dafb0e-efac-48f9-b2ee-0a576c9c55e0"
		},
		{
			"id": "43fd6dfd-836a-91ce-1eab-17977552dbb9",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/{{commentId2}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1458660082435,
			"name": "Delete commentId2",
			"description": "",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"rawModeData": "",
			"folder": "442163ce-4942-a1d1-c1f5-81ca362858e5"
		},
		{
			"id": "5e2a1879-b3e6-378f-2af0-22698aeecfbb",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/{{commentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'CommentEntry';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        it('expect to have values', function(){\n            expect(response.body.entry.edited,\"edited\").to.be.true;\n            expect(response.body.entry.canEdit,\"canEdit\").to.be.true;\n            expect(response.body.entry.canDelete,\"canDelete\").to.be.true;\n            expect(response.body.entry.content,\"content\").equals(\"Updated comment\");\n            expect(response.body.entry.createdBy.id,\"createdBy.id\").equals(postman.getEnvironmentVariable(\"user1UserName\"));\n            expect(response.body.entry.createdBy.firstName,\"createdBy.firstname\").equals(postman.getEnvironmentVariable(\"user1FirstName\"));\n            expect(response.body.entry.createdBy.lastName,\"createdBy.lastName\").equals(postman.getEnvironmentVariable(\"user1LastName\"));\n            expect(response.body.entry.createdBy.email,\"createdBy.email\").equals(postman.getEnvironmentVariable(\"user1Email\"));\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245698037,
			"name": "Positive: Update comment",
			"description": "",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"rawModeData": "{\n  \"content\": \"Updated comment\"\n}",
			"folder": "a1875a05-3896-6d38-4da1-7f3a9c47b382"
		},
		{
			"id": "5f5700d4-6d53-abe4-520b-72042c4a632a",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/invalid-id/comments",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(404);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459795251944,
			"name": "Negative: Add comment with invalid node",
			"description": "Test Case cloud-1518",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"rawModeData": "{\n    \"content\": \"Test Comment 4\"\n}"
		},
		{
			"id": "65ee21fb-57e5-6bbf-9e40-9d2489014fa9",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'CommentPaging';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        describe('positive values check:', function() {\n            it('test 1', function() {\n                expect(response.body.list.entries).to.have.length.above(0,'entries length');\n            });\n        });\n    });\n});\n\npostman.setGlobalVariable('comments',JSON.stringify(response.body));",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245715660,
			"name": "Positive: Retrieve comments from node",
			"description": "",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"folder": "c3a573d2-660f-144f-7006-cc2a54dd1d21"
		},
		{
			"id": "67005591-86a4-ca02-7de6-3467d0e56ed0",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/invalid-id/comments/{{commentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(404);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459795235114,
			"name": "Negative: Update comment with invalid node",
			"description": "",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"rawModeData": "{\n  \"content\": \"ӉӋӐӞ\"\n}"
		},
		{
			"id": "67bf072e-c64f-d1eb-ab88-1e3047d10a1c",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(400);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245762019,
			"name": "Negative: Add empty comment",
			"description": "content: \"\"",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"rawModeData": "  {\n    \"content\": \"\"\n  }",
			"folder": "5206f926-88e4-6e83-73f3-62d1bbb4fa87"
		},
		{
			"id": "730d1736-dcdb-ce7c-de0a-5d1a5a42edf9",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/invalid-id",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(404);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459795222903,
			"name": "Negative: Delete comment with invalid comment id",
			"description": "",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "831ff70f-6684-68b0-37d4-11e55dc25a48",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459246216415,
			"name": "Negative: Retrieve deleted comment",
			"description": "",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"folder": "d8dafb0e-efac-48f9-b2ee-0a576c9c55e0"
		},
		{
			"id": "856921fa-1a20-0319-31ee-891e2ca01279",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'CommentEntry';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(201);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n          \n        it('expect to have values', function(){\n            expect(response.body.entry.edited,\"edited\").to.be.false;\n            expect(response.body.entry.canEdit,\"canEdit\").to.be.true;\n            expect(response.body.entry.canDelete,\"canDelete\").to.be.true;\n            expect(response.body.entry.content,\"content\").equals(\"This is a comment\");\n            expect(response.body.entry.createdBy.id,\"createdBy.id\").equals(postman.getEnvironmentVariable(\"user1UserName\"));\n            expect(response.body.entry.createdBy.firstName,\"createdBy.firstname\").equals(postman.getEnvironmentVariable(\"user1FirstName\"));\n            expect(response.body.entry.createdBy.lastName,\"createdBy.lastName\").equals(postman.getEnvironmentVariable(\"user1LastName\"));\n            expect(response.body.entry.createdBy.email,\"createdBy.email\").equals(postman.getEnvironmentVariable(\"user1Email\"));\n        });\n    });\n});\n\npostman.setGlobalVariable(\"commentId\", response.body.entry.id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245746851,
			"name": "Positive: Add comment to a node",
			"description": "",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"rawModeData": "{\n    \"content\": \"This is a comment\"\n}",
			"folder": "5206f926-88e4-6e83-73f3-62d1bbb4fa87"
		},
		{
			"id": "94bb2330-678b-8968-972c-22b5915ded82",
			"headers": "Authorization: {{user2Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(403);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245740387,
			"name": "Negative: Retrieve comments from a not joined site",
			"description": "",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"folder": "c3a573d2-660f-144f-7006-cc2a54dd1d21"
		},
		{
			"id": "964f45dc-55e2-c654-47b8-57a07a7b5af5",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/{{commentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\ndescribe('\"' + request + '\"', function() {\n    it('should return a valid status', function() {\n        response.should.have.status(204);\n        response.should.be.json;\n    });\n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245683917,
			"name": "Positive: Delete comment",
			"description": "",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"rawModeData": "",
			"folder": "d8dafb0e-efac-48f9-b2ee-0a576c9c55e0"
		},
		{
			"id": "a3aca0d7-1369-395e-5fbb-54228cf2d321",
			"headers": "Authorization: {{user2Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(403);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245774282,
			"name": "Negative: Add comment with no permission",
			"description": "Test Case cloud-1518",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"rawModeData": "{\n    \"content\": \"Test Comment 4\"\n}",
			"folder": "5206f926-88e4-6e83-73f3-62d1bbb4fa87"
		},
		{
			"id": "a511a1c8-6159-56c0-e148-94cd3c1057d0",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments?skipCount=0&maxItems=2",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'CommentPaging';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        it('expect list.entries to have lengthOf 2', function() {\n            expect(response.body.list.entries,'entries length').to.have.lengthOf(2);\n        });\n        \n        // compare with loaded comments before\n        var comments = JSON.parse(postman.getGlobalVariable('comments'));\n        comments = comments.list.entries.slice(0, 2);\n        it('expect list.entries[0-1] to equal comments.list.entries[0-1]', function() {\n            result = expect(response.body.list.entries.slice(0, 2),'comments 1-2').to.deep.equal(comments);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245722091,
			"name": "Positive: Retrieve only last 2 comments",
			"description": "",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"folder": "c3a573d2-660f-144f-7006-cc2a54dd1d21"
		},
		{
			"id": "a7f12eed-260a-2135-cd3d-e758b04621b9",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/{{commentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1458659998435,
			"name": "Delete commentId",
			"description": "Should be already deleted!",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"rawModeData": "",
			"folder": "442163ce-4942-a1d1-c1f5-81ca362858e5"
		},
		{
			"id": "abe6d8fc-5392-106e-3a42-18e146b5e69e",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/{{commentId5}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1458660203408,
			"name": "Delete commentId5",
			"description": "",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"rawModeData": "",
			"folder": "442163ce-4942-a1d1-c1f5-81ca362858e5"
		},
		{
			"id": "adec834a-d5a5-0f04-c67f-08b3e58645f8",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{tagId}}/comments",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// TODO: This will only work once SOLR is enabled for the embedded Tomcat\n\n/*\n\n// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(405);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n*/",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459800542427,
			"name": "Negative: Add comment to a tag (TODO)",
			"description": "",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"rawModeData": "{\n    \"content\": \"This is a comment\"\n}"
		},
		{
			"id": "b3a84a4f-b95f-b543-67c9-c03c1e557b69",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/{{commentId3}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1458660101131,
			"name": "Delete commentId3",
			"description": "",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"rawModeData": "",
			"folder": "442163ce-4942-a1d1-c1f5-81ca362858e5"
		},
		{
			"id": "b6d8bf4c-2cf5-83e7-e3a0-b309a27d30f7",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/{{commentId}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(400);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245707349,
			"name": "Negative: Update comment with empty content",
			"description": "content : \"\"",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"rawModeData": "{\n  \"content\": \"\"\n}",
			"folder": "a1875a05-3896-6d38-4da1-7f3a9c47b382"
		},
		{
			"id": "be50d15b-0b75-23df-66f9-5edc06dc34a1",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{commentId}}/comments",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(405);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245767275,
			"name": "Negative: Add comment to a comment",
			"description": "",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"rawModeData": "  {\n    \"content\": \"This is a comment\"\n  }",
			"folder": "5206f926-88e4-6e83-73f3-62d1bbb4fa87"
		},
		{
			"id": "c0d66d6c-c175-3c60-6679-2e9a3e5d46c8",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'CommentEntry';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(201);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        it('expect to have values', function(){\n            expect(response.body.entry.edited,\"edited\").to.be.false;\n            expect(response.body.entry.canEdit,\"canEdit\").to.be.true;\n            expect(response.body.entry.canDelete,\"canDelete\").to.be.true;\n            expect(response.body.entry.content,\"content\").equals(\"?*^&*(,\");\n            expect(response.body.entry.createdBy.id,\"createdBy.id\").equals(postman.getEnvironmentVariable(\"user1UserName\"));\n            expect(response.body.entry.createdBy.firstName,\"createdBy.firstname\").equals(postman.getEnvironmentVariable(\"user1FirstName\"));\n            expect(response.body.entry.createdBy.lastName,\"createdBy.lastName\").equals(postman.getEnvironmentVariable(\"user1LastName\"));\n            expect(response.body.entry.createdBy.email,\"createdBy.email\").equals(postman.getEnvironmentVariable(\"user1Email\"));\n        });\n    });\n});\n\npostman.setGlobalVariable(\"commentId2\", response.body.entry.id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245752267,
			"name": "Positive: Add special characters comment",
			"description": "special characters\n\"?*^&*(,\"",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"rawModeData": "  {\n    \"content\": \"?*^&*(,\"\n  }",
			"folder": "5206f926-88e4-6e83-73f3-62d1bbb4fa87"
		},
		{
			"id": "c1d9e295-4f5a-f302-0cb0-d67bce57ae63",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}};pwc/comments",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'Error';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(404);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n        it('expect to have content length', function(){\n            expect(response).to.have.header('Content-Length');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245737467,
			"name": "Negative: Retrieve comments from invalid node 2",
			"description": "",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"folder": "c3a573d2-660f-144f-7006-cc2a54dd1d21"
		},
		{
			"id": "c5763ea7-cc15-8042-6081-e0b7b32ecf96",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}};3.0/comments",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'CommentPaging';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        describe('positive values check:', function() {\n            it('test 1', function() {\n                expect(response.body.list.entries).to.have.length.above(0,'entries length');\n            });\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459245731875,
			"name": "Positive: Retrieve comments with version number",
			"description": "",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"folder": "c3a573d2-660f-144f-7006-cc2a54dd1d21"
		},
		{
			"id": "c972f14e-3aef-ef15-893c-a18e64c55718",
			"headers": "Authorization: {{user1Auth}}\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments?skipCount=2",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "// Load Postman BDD ... use http://chaijs.com/ for expressions\neval(globals[\"postmanBDD\"]);\n\n// Load Alfresco schema\nvar schema = JSON.parse(globals[\"alfresco-schema\"]);\ntv4.addSchema('http://alfresco.com/schema', schema);\nvar entry = 'CommentPaging';\nvar fragment = '#/definitions/' + entry;\nvar subschema = tv4.getSchema('http://alfresco.com/schema' + fragment);\n\ndescribe('\"' + request.name + '\"', function() {\n    it('expect to return ' + entry, function() {\n        expect(response).to.have.status(200);\n        expect(response).to.be.json;\n        expect(response.body).to.not.be.empty;\n    });\n    \n    describe('header', function() {\n        it('expect to have content type', function(){\n            expect(response).to.have.header('Content-Type');\n        });\n    });\n    \n    describe('body', function() {\n        it('expect to have schema ' + fragment, function() {\n            expect(response.body).to.have.schema(subschema);\n        });\n        \n        // compare with loaded comments before\n        var comments = JSON.parse(postman.getGlobalVariable('comments'));\n        comments = comments.list.entries.slice(2);\n        it('expect list.entries to equal comments.list.entries[3:]', function() {\n            result = expect(JSON.stringify(response.body.list.entries),'comments').to.deep.equal(JSON.stringify(comments));\n        });\n    });\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1459262632808,
			"name": "Positive: Retrieve comments but skip the first 2",
			"description": "",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"folder": "c3a573d2-660f-144f-7006-cc2a54dd1d21"
		},
		{
			"id": "e4f452ed-aed3-e77a-0284-6c67bef39c3c",
			"headers": "Authorization: {{user1Auth}}\nContent-Type: application/json\n",
			"url": "{{baseUrl}}/{{networkId}}/public/alfresco/versions/1/nodes/{{nodeId}}/comments/{{commentId4}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1458660188592,
			"name": "Delete commentId4",
			"description": "",
			"collectionId": "d39e4349-1996-14f7-932c-4aac4665f1f1",
			"responses": [],
			"rawModeData": "",
			"folder": "442163ce-4942-a1d1-c1f5-81ca362858e5"
		}
	]
}